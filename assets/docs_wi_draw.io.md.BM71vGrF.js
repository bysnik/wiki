import{_ as i,c as t,o as a,ag as s}from"./chunks/framework.D4Vqf8I7.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/wi/draw.io.md","filePath":"docs/wi/draw.io.md","lastUpdated":1757077120000}'),r={name:"docs/wi/draw.io.md"};function o(n,e,l,d,h,c){return a(),t("div",null,e[0]||(e[0]=[s('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p><a href="https://github.com/jgraph/drawio" target="_blank" rel="noreferrer">draw.io</a> is a whiteboarding / diagramming software application. This project contains various docker implementations of draw.io and associated tools:</p><ul><li>draw.io docker image that is always up-to-date with draw.io releases</li><li>draw.io export server image which allow exporting draw.io diagrams to pdf and images</li><li>docker-compose to run draw.io with the export server</li><li>docker-compose to run draw.io integrated within nextcloud</li><li>docker-compose to run draw.io self-contained without any dependency on diagrams.net website (with the export server, Google Drive support, OneDrive support, and EMF conversion support (for VSDX export)</li></ul><h2 id="description" tabindex="-1">Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;Description&quot;">​</a></h2><p>The Dockerfile builds from <code>tomcat:9-jre11</code> (see <a href="https://hub.docker.com/_/tomcat/" target="_blank" rel="noreferrer">https://hub.docker.com/_/tomcat/</a>)</p><p><strong>Note: Starting from version 16.5.3, alpine and debian images are no longer maintained. We changed to a single image that uses the tomcat image with the least security vulnerabilities.</strong></p><p>Forked from <a href="https://github.com/fjudith/docker-draw.io" target="_blank" rel="noreferrer">fjudith/draw.io</a></p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li>Based on Tomcat so it can be used directly or behind a reverse-proxy</li><li>Self-Signed certificate autogen</li><li>Let&#39;s encrypt certificate autogen</li><li>Support SSL Keystore mount to <code>/user/local/tomcat/.keystore</code></li></ul><h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">​</a></h2><p>Run the container.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;draw&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8443:8443</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jgraph/drawio</span></span></code></pre></div><blockquote><p><code>?offline=1</code> is a security feature that disables support of cloud storage.</p></blockquote><h2 id="environment-variables" tabindex="-1">Environment variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;Environment variables&quot;">​</a></h2><ul><li><strong>LETS_ENCRYPT_ENABLED</strong>: Enables Let&#39;s Encrypt certificate instead of self-signed; default <code>false</code></li><li><strong>PUBLIC_DNS</strong>: DNS domain to be used as certificate &quot;CN&quot; record; default <code>draw.example.com</code></li><li><strong>ORGANISATION_UNIT</strong>: Organisation unit to be used as certificate &quot;OU&quot; record; default <code>Cloud Native Application</code></li><li><strong>ORGANISATION</strong>: Organisation name to be used as certificate &quot;O&quot; record; default <code>example inc</code></li><li><strong>CITY</strong>: City name to be used as certificate &quot;L&quot; record; default <code>Paris</code></li><li><strong>STATE</strong>: State name to be used as certificate &quot;ST&quot; record; default <code>Paris</code></li><li><strong>COUNTRY_CODE</strong>: Country code to be used as certificate &quot;C&quot; record; default <code>FR</code></li><li><strong>KEYSTORE_PASS</strong>: &quot;.keystore&quot;/.jks&quot; store password; default <code>V3ry1nS3cur3P4ssw0rd</code></li><li><strong>KEY_PASS</strong>: Private key password; default <code>&lt;ref:KEYSTORE_PASS&gt;</code></li></ul><h2 id="https-ssl-certificate-via-let-s-encrypt" tabindex="-1">HTTPS SSL Certificate via Let&#39;s Encrypt <a class="header-anchor" href="#https-ssl-certificate-via-let-s-encrypt" aria-label="Permalink to &quot;HTTPS SSL Certificate via Let&#39;s Encrypt&quot;">​</a></h2><h3 id="prerequisites" tabindex="-1">Prerequisites: <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites:&quot;">​</a></h3><ol><li>A Linux machine connected to the Internet with ports 443 and 80 open</li><li>A domain/subdomain name pointing to this machine&#39;s IP address. (e.g., drawio.example.com)</li></ol><h3 id="method" tabindex="-1">Method: <a class="header-anchor" href="#method" aria-label="Permalink to &quot;Method:&quot;">​</a></h3><ol><li>Create a directory to store the letsencrypt data. (e.g., /opt/docker/drawiodata/letsencrypt-log, /opt/docker/drawiodata/letsencrypt-etc, /opt/docker/drawiodata/letsencrypt-lib)</li><li>Using jgraph/drawio docker image, run the following command</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m1g</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/opt/docker/drawiodata/letsencrypt-log:/var/log/letsencrypt/&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/opt/docker/drawiodata/letsencrypt-etc:/etc/letsencrypt/&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/opt/docker/drawiodata/letsencrypt-lib:/var/lib/letsencrypt&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LETS_ENCRYPT_ENABLED=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PUBLIC_DNS=drawio.example.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;draw&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 80:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 443:8443</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jgraph/drawio</span></span></code></pre></div><p>Notice that mapping port 80 to container&#39;s port 80 allows certbot to work in stand-alone mode. Mapping port 443 to container&#39;s port 8443 allows the container tomcat to serve https requests directly.</p><h2 id="changing-draw-io-configuration" tabindex="-1">Changing draw.io configuration <a class="header-anchor" href="#changing-draw-io-configuration" aria-label="Permalink to &quot;Changing draw.io configuration&quot;">​</a></h2><p>Configuration is managed by <code>DRAWIO_*</code> environment variables. For a list of these variables, check the <code>docker-entrypoint.sh</code> file in the <code>main</code> directory. For example, these variables allow enabling integration with Google Drive, OneDrive, ...</p><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ul><li><a href="https://github.com/jgraph/drawio" target="_blank" rel="noreferrer">https://github.com/jgraph/drawio</a></li></ul>',26)]))}const u=i(r,[["render",o]]);export{k as __pageData,u as default};
