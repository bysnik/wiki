import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.D4Vqf8I7.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/disciplines/osis/p6.md","filePath":"docs/disciplines/osis/p6.md","lastUpdated":1759823510000}'),n={name:"docs/disciplines/osis/p6.md"};function o(p,s,l,h,d,r){return t(),a("div",null,s[0]||(s[0]=[e('<h3 id="практическая-работа-по-теме-сетевая-подсистема-linux" tabindex="-1"><strong>Практическая работа по теме: &quot;Сетевая подсистема Linux&quot;</strong> <a class="header-anchor" href="#практическая-работа-по-теме-сетевая-подсистема-linux" aria-label="Permalink to &quot;**Практическая работа по теме: &quot;Сетевая подсистема Linux&quot;**&quot;">​</a></h3><p><strong>Цель работы</strong>: Освоить базовые навыки работы с сетевой подсистемой Linux, закрепить знания о логической организации передачи данных, адресации, маршрутизации и взаимодействии удаленных процессов через практические примеры.</p><hr><h2 id="блок-теории" tabindex="-1"><strong>Блок теории</strong> <a class="header-anchor" href="#блок-теории" aria-label="Permalink to &quot;**Блок теории**&quot;">​</a></h2><p>Перед выполнением работы кратко вспомним ключевые концепции, изученные на теоретическом занятии:</p><ol><li><p><strong>Многоуровневая модель OSI/TCP-IP</strong><br> — Сетевая подсистема Linux реализует уровни модели TCP/IP (физический, канальный, сетевой, транспортный, прикладной).<br> — Пример: команда <code>ping</code> работает на сетевом уровне (ICMP), а <code>netcat</code> — на транспортном (TCP/UDP).</p></li><li><p><strong>Адресация и маршрутизация</strong><br> — IP-адреса идентифицируют узлы в сети, MAC-адреса — устройства на канальном уровне.<br> — Таблица маршрутизации определяет путь пакетов к целевому узлу (команда <code>ip route</code>).</p></li><li><p><strong>Логические соединения и передача данных</strong><br> — TCP обеспечивает надежную передачу с установлением соединения («рукопожатие»).<br> — UDP передает данные без подтверждения (сообщения).<br> — Пример: веб-сервер использует TCP, а VoIP-приложения — UDP.</p></li><li><p><strong>Синхронизация процессов</strong><br> — Удаленные процессы синхронизируются через механизмы вроде сокетов, сигналов или временных меток.</p></li><li><p><strong>Протоколы</strong><br> — Набор правил для передачи данных (HTTP, DNS, SSH). В Linux протоколы реализованы через сокеты и демоны (например, <code>sshd</code> для SSH).</p></li></ol><hr><h2 id="практическая-часть" tabindex="-1"><strong>Практическая часть</strong> <a class="header-anchor" href="#практическая-часть" aria-label="Permalink to &quot;**Практическая часть**&quot;">​</a></h2><p><em>Преподаватель демонстрирует команды, студенты повторяют их в терминале Linux (рекомендуется использовать Ubuntu/Debian в виртуальной машине или WSL).</em></p><hr><h3 id="задание-1-проверка-сетевых-интерфеисов-и-настроика-ip-адреса" tabindex="-1"><strong>Задание 1. Проверка сетевых интерфейсов и настройка IP-адреса</strong> <a class="header-anchor" href="#задание-1-проверка-сетевых-интерфеисов-и-настроика-ip-адреса" aria-label="Permalink to &quot;**Задание 1. Проверка сетевых интерфейсов и настройка IP-адреса**&quot;">​</a></h3><p><strong>Цель</strong>: Изучить структуру сетевых интерфейсов и работу с IP-адресацией.</p><ol><li><p><strong>Просмотр активных интерфейсов</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span></span></code></pre></div><p>— Обратите внимание на интерфейсы <code>lo</code> (loopback), <code>eth0</code>/<code>ens33</code> (физический интерфейс).<br> — <strong>Связь с теорией</strong>: Интерфейсы соответствуют канальному уровню модели OSI.</p></li><li><p><strong>Просмотр IP-адресов</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> addr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span></span></code></pre></div><p>— Найдите IPv4-адрес (например, <code>192.168.1.10/24</code>).<br> — <strong>Связь с теорией</strong>: IP-адрес относится к сетевому уровню.</p></li><li><p><strong>Временная настройка IP-адреса</strong> (на интерфейсе <code>eth0</code>):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> addr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10.0.0.10/24</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth0</span></span></code></pre></div><p>— Проверьте изменения: <code>ip addr show eth0</code>.<br> — <strong>Важно</strong>: Адрес сбросится после перезагрузки (для постоянной настройки используется файл <code>/etc/network/interfaces</code>).</p></li></ol><hr><h3 id="задание-2-анализ-таблицы-маршрутизации" tabindex="-1"><strong>Задание 2. Анализ таблицы маршрутизации</strong> <a class="header-anchor" href="#задание-2-анализ-таблицы-маршрутизации" aria-label="Permalink to &quot;**Задание 2. Анализ таблицы маршрутизации**&quot;">​</a></h3><p><strong>Цель</strong>: Понять, как система определяет путь для отправки пакетов.</p><ol><li><p><strong>Просмотр таблицы маршрутизации</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> route</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span></span></code></pre></div><p>Пример вывода:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>default via 192.168.1.1 dev eth0 </span></span>\n<span class="line"><span>192.168.1.0/24 dev eth0 proto kernel scope link</span></span></code></pre></div><p>— <code>default</code> — маршрут по умолчанию (шлюз).<br> — <strong>Связь с теорией</strong>: Маршрутизация решает задачу доставки пакетов между сетями.</p></li><li><p><strong>Добавление статического маршрута</strong> (к сетке <code>10.0.1.0/24</code> через шлюз <code>192.168.1.1</code>):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> route</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10.0.1.0/24</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> via</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192.168.1.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth0</span></span></code></pre></div><p>— Убедитесь, что маршрут добавлен: <code>ip route show</code>.</p></li></ol><hr><h3 id="задание-3-проверка-активных-соединении" tabindex="-1"><strong>Задание 3. Проверка активных соединений</strong> <a class="header-anchor" href="#задание-3-проверка-активных-соединении" aria-label="Permalink to &quot;**Задание 3. Проверка активных соединений**&quot;">​</a></h3><p><strong>Цель</strong>: Исследовать установленные логические соединения.</p><ol><li><p><strong>Просмотр TCP/UDP-соединений</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ss</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -tuln</span></span></code></pre></div><p>— Флаги: <code>-t</code> (TCP), <code>-u</code> (UDP), <code>-l</code> (прослушивание), <code>-n</code> (отображать номера портов).<br> — Пример вывода:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LISTEN 0 50  *:22   *:*    # SSH-сервер слушает порт 22</span></span></code></pre></div><p>— <strong>Связь с теорией</strong>: Порты (например, 22 для SSH) относятся к транспортному уровню.</p></li><li><p><strong>Анализ соединения с удаленным сервером</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ping</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> google.com</span></span></code></pre></div><p>— Нажмите <code>Ctrl+C</code>, чтобы остановить.<br> — <strong>Связь с теорией</strong>: <code>ping</code> использует ICMP (сетевой уровень) для проверки доступности узла.</p></li></ol><hr><h3 id="задание-4-установка-соединения-между-процессами-tcp-udp" tabindex="-1"><strong>Задание 4. Установка соединения между процессами (TCP/UDP)</strong> <a class="header-anchor" href="#задание-4-установка-соединения-между-процессами-tcp-udp" aria-label="Permalink to &quot;**Задание 4. Установка соединения между процессами (TCP/UDP)**&quot;">​</a></h3><p><strong>Цель</strong>: Продемонстрировать передачу данных между удаленными процессами.</p><h4 id="сценарии-для-двух-терминалов-или-двух-машин-в-локальнои-сети" tabindex="-1"><strong>Сценарий для двух терминалов (или двух машин в локальной сети)</strong> <a class="header-anchor" href="#сценарии-для-двух-терминалов-или-двух-машин-в-локальнои-сети" aria-label="Permalink to &quot;**Сценарий для двух терминалов (или двух машин в локальной сети)**&quot;">​</a></h4><ol><li><p><strong>На машине-сервере</strong> (слушает порт 5000):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5000</span></span></code></pre></div><p>— <code>-l</code> — режим прослушивания, <code>-p</code> — указание порта.</p></li><li><p><strong>На машине-клиенте</strong> (подключается к серверу):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">IP_сервер</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">а</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5000</span></span></code></pre></div><p>— Введите текст в одном терминале — он появится в другом.<br> — <strong>Связь с теорией</strong>: Это пример передачи данных через TCP-соединение (транспортный уровень). Для UDP добавьте флаг <code>-u</code>.</p></li><li><p><strong>Завершение работы</strong>: Нажмите <code>Ctrl+C</code> в обоих терминалах.</p></li></ol><hr><h3 id="задание-5-анализ-сетевого-трафика-с-помощью-tcpdump" tabindex="-1"><strong>Задание 5. Анализ сетевого трафика с помощью <code>tcpdump</code></strong> <a class="header-anchor" href="#задание-5-анализ-сетевого-трафика-с-помощью-tcpdump" aria-label="Permalink to &quot;**Задание 5. Анализ сетевого трафика с помощью `tcpdump`**&quot;">​</a></h3><p><strong>Цель</strong>: Увидеть, как данные передаются на уровне пакетов.</p><ol><li><p><strong>Запуск сниффера на интерфейсе <code>eth0</code></strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5000</span></span></code></pre></div><p>— <code>-n</code> — не разрешать имена хостов, <code>port 5000</code> — фильтр по порту.</p></li><li><p><strong>Повторите Задание 4</strong> (соединение через <code>nc</code> на порту 5000).<br> — В терминале с <code>tcpdump</code> вы увидите «сырые» пакеты TCP (SYN, ACK, данные).<br> — <strong>Связь с теорией</strong>: Демонстрация работы протокола TCP (трехэтапное «рукопожатие»).</p></li></ol><hr><h2 id="вопросы-для-самопроверки" tabindex="-1"><strong>Вопросы для самопроверки</strong> <a class="header-anchor" href="#вопросы-для-самопроверки" aria-label="Permalink to &quot;**Вопросы для самопроверки**&quot;">​</a></h2><ol><li>Какая команда показывает таблицу маршрутизации в современных дистрибутивах Linux?</li><li>Почему при использовании <code>nc</code> для передачи данных важно указывать протокол (TCP/UDP)?</li><li>Какой уровень модели OSI отвечает за адресацию через IP-адреса?</li><li>Что означает запись <code>192.168.1.0/24</code> в таблице маршрутизации?</li><li>Как проверить, какие процессы используют сетевые порты?</li></ol><hr><h2 id="отчет-по-работе" tabindex="-1"><strong>Отчет по работе</strong> <a class="header-anchor" href="#отчет-по-работе" aria-label="Permalink to &quot;**Отчет по работе**&quot;">​</a></h2><p>Студенты должны:</p><ol><li>Приложить скриншоты выполнения ключевых команд (например, вывод <code>ip addr</code>, <code>ss -tuln</code>, <code>tcpdump</code>).</li><li>Ответить на вопросы для самопроверки.</li><li>Написать вывод: как теоретические концепции (маршрутизация, протоколы) проявляются в практических примерах.</li></ol><hr><p><strong>Примечание для преподавателя</strong>:</p><ul><li>Перед работой убедитесь, что у студентов есть доступ к Linux (виртуальная машина, WSL, или лабораторный стенд).</li><li>Для безопасности рекомендуется использовать локальную сеть или <code>localhost</code> в заданиях 4–5.</li><li>Акцентируйте внимание на связи каждой команды с теорией (например: «Команда <code>ip route</code> решает проблему маршрутизации, о которой мы говорили на лекции»).</li></ul>',40)]))}const k=i(n,[["render",o]]);export{g as __pageData,k as default};
