import{_ as i,c as n,o as l,ag as t,j as a,a as s}from"./chunks/framework.D4Vqf8I7.js";const b=JSON.parse('{"title":"Лекция 1. Введение в операционные системы — история, функции, архитектура и классификация","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/disciplines/osis/l1.md","filePath":"docs/disciplines/osis/l1.md","lastUpdated":1761642269000}'),r={name:"docs/disciplines/osis/l1.md"};function o(p,e,d,h,c,g){return l(),n("div",null,e[0]||(e[0]=[t("",104),a("iframe",{src:"https://viewer.diagrams.net/?highlight=0000ff&layers=1&nav=1&title=Diagram#Uhttps%3A%2F%2Fdrive.google.com%2Fuc%3Fid%3D1QiexeRpNxstvGXQHJRVDEi0vTjPrrgpp%26export%3Ddownload",width:"100%",height:"300px",frameborder:"0",allowfullscreen:""},null,-1),a("p",null,"Основное достоинство микроядерной архитектуры - высокая степень модульности ядра операционной системы. Это существенно упрощает добавление в него новых компонентов. В микроядерной операционной системе можно, не прерывая ее работы, загружать и выгружать новые драйверы, файловые системы и т. д. Компоненты ядра операционной системы ничем принципиально не отличаются от пользовательских программы. Микроядерная архитектура повышает надежность системы, поскольку ошибка на уровне непривилегированной программы менее опасна, чем отказ на уровне режима ядра.",-1),a("p",null,"В то же время микроядерная архитектура операционной системы вносит дополнительные накладные расходы, связанные с передачей сообщений, что существенно влияет на производительность. Для того чтобы микроядерная операционная система по скорости не уступала операционным системам на базе монолитного ядра, требуется очень аккуратно проектировать разбиение системы на компоненты, стараясь минимизировать взаимодействие между ними. Яркими примерами ОС с микроядерной архитектурой являются QNX и Minix.",-1),a("h3",{id:"смешанные-системы",tabindex:"-1"},[s("Смешанные системы "),a("a",{class:"header-anchor",href:"#смешанные-системы","aria-label":'Permalink to "Смешанные системы"'},"​")],-1),a("p",null,"Все рассмотренные подходы к построению операционных систем имеют свои достоинства и недостатки. Поэтому реальные ОС объединяют в себе подходы различных архитектур. Например, современные версии Windows, macOS и Linux используют монолитное ядро (или гибридное, как в случае Windows NT), но активно выносят многие драйверы и подсистемы в пользовательское пространство, заимствуя тем самым преимущества микроядерного подхода.",-1),a("h3",{id:"виртуальные-машины",tabindex:"-1"},[s("Виртуальные машины "),a("a",{class:"header-anchor",href:"#виртуальные-машины","aria-label":'Permalink to "Виртуальные машины"'},"​")],-1),a("iframe",{src:"https://viewer.diagrams.net/?highlight=0000ff&layers=1&nav=1&title=Diagram#Uhttps%3A%2F%2Fdrive.google.com%2Fuc%3Fid%3D1C6ue1lXWFg3AHo51mePuvIOp9Qy_2pTz%26export%3Ddownload",width:"100%",height:"550px",frameborder:"0",allowfullscreen:""},null,-1),a("p",null,"Каждая виртуальная машина предстает перед пользователем как голое железо - копия всего hardware в вычислительной системе, включая процессор, привилегированные и непривилегированные команды, устройства ввода-вывода, прерывания и т.д. И он остается с этим железом один на один. При попытке обратиться к такому виртуальному железу на уровне привилегированных команд в действительности происходит системный вызов реальной операционной системы, которая и производит все необходимые действия. Такой подход позволяет каждому пользователю загрузить свою операционную систему на виртуальную машину и делать с ней все, что душа пожелает.",-1),a("h3",{id:"контеинеры",tabindex:"-1"},[s("Контейнеры "),a("a",{class:"header-anchor",href:"#контеинеры","aria-label":'Permalink to "Контейнеры"'},"​")],-1),a("iframe",{src:"https://viewer.diagrams.net/?highlight=0000ff&layers=1&nav=1&title=Diagram#Uhttps%3A%2F%2Fdrive.google.com%2Fuc%3Fid%3D1vdP-elRTc1ZLJ3nOJENPnvRM1upHXhGX%26export%3Ddownload",width:"100%",height:"500px",frameborder:"0",allowfullscreen:""},null,-1),t("",23)]))}const k=i(r,[["render",o]]);export{b as __pageData,k as default};
