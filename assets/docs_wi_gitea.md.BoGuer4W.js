import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.D4Vqf8I7.js";const l="/wiki/assets/20250728123353.BmWFdHi_.png",e="/wiki/assets/20250723113505.Cn_AvIci.png",p="/wiki/assets/20250723114050.kkizcBzm.png",h="/wiki/assets/20250723114145.D0oKVNNA.png",k="/wiki/assets/giteaalt.CwUfc0sg.png",r="/wiki/assets/altp11rpmbuild.CGJ-RLnc.png",d="/wiki/assets/image.D85AYqge.png",o="/wiki/assets/image-0.B3eNMacP.png",c="/wiki/assets/image-2.BnbozcGp.png",g="/wiki/assets/image-222.BtAZevYh.png",E="/wiki/assets/image-3.LydH8ti5.png",y="/wiki/assets/generate-api-token.NySQjOJJ.png",B=JSON.parse('{"title":"Gitea","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/wi/gitea.md","filePath":"docs/wi/gitea.md","lastUpdated":1756134057000}'),F={name:"docs/wi/gitea.md"};function u(C,s,A,b,m,D){return n(),a("div",null,s[0]||(s[0]=[t('<h1 id="gitea" tabindex="-1">Gitea <a class="header-anchor" href="#gitea" aria-label="Permalink to &quot;Gitea&quot;">​</a></h1><p><img src="'+l+'" alt=""></p><p>это бесплатный сервис с открытым исходным кодом для хостинга Git-репозиториев, разработанный для совместной работы над проектами. Он предоставляет функциональность для хранения, управления и совместной работы над исходным кодом, включая такие инструменты, как отслеживание ошибок, ревью кода, непрерывная интеграция и многое другое.</p><h2 id="установка-gitea" tabindex="-1">Установка Gitea <a class="header-anchor" href="#установка-gitea" aria-label="Permalink to &quot;Установка Gitea&quot;">​</a></h2><p>Установка Gitea:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitea</span></span></code></pre></div><h2 id="установка-субд" tabindex="-1">Установка СУБД <a class="header-anchor" href="#установка-субд" aria-label="Permalink to &quot;Установка СУБД&quot;">​</a></h2><p>Gitea умеет работать с несколькими базами данных: MySQL, PostgreSQL, MS-SQL, Sqlite3 и TiDB.</p><h3 id="настроика-postgresql" tabindex="-1">Настройка PostgreSQL <a class="header-anchor" href="#настроика-postgresql" aria-label="Permalink to &quot;Настройка PostgreSQL&quot;">​</a></h3><p>Установка PostgreSQL сервера:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postgresql17-server</span></span></code></pre></div><p>Создание конфигурационных файлов PostgreSQL и создание пароля администратора:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/etc/init.d/postgresql</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> initdb</span></span></code></pre></div><p>Запуск сервиса postgresql:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --now</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postgresql</span></span></code></pre></div><p>Вход в командую оболочку PostgreSQL:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">psql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postgres</span></span></code></pre></div><p>Создание пользователя gitea с паролем 123:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> USER</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gitea</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WITH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PASSWORD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Создание базы данных gitea:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DATABASE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gitea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Предоставление всех привилегий пользователю gitea для управление базой данных gitea:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GRANT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ALL PRIVILEGES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DATABASE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gitea </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gitea;</span></span></code></pre></div><p>Изменение владельца базой данных gitea на пользователя gitea:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DATABASE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gitea </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OWNER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gitea;</span></span></code></pre></div><p>Выход из командной оболочки PostgreSQL:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exit;</span></span></code></pre></div><p>Перезагрузка сервиса postgresql:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postgresql</span></span></code></pre></div><h3 id="настроика-mysql" tabindex="-1">Настройка MySQL <a class="header-anchor" href="#настроика-mysql" aria-label="Permalink to &quot;Настройка MySQL&quot;">​</a></h3><p>Установка MySQL сервера:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MySQL-server</span></span></code></pre></div><p>Запуск сервиса mysqld:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --now</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysqld</span></span></code></pre></div><p>Вход в командую оболочку MySQL:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span></span></code></pre></div><p>Создание пользователя gitea с паролем 123:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gitea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IDENTIFIED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Создание базы данных gitea:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DATABASE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gitea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Предоставление всех привилегий пользователю gitea для управление базой данных gitea:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GRANT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ALL PRIVILEGES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;gitea&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Выход из командной оболочки MySQL:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exti;</span></span></code></pre></div><p>Переключение MySQL в режим сервера, чтобы он отдавал 3306 порт:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">control</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysqld</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span></span></code></pre></div><p>Перезагрузка сервиса mysqld:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysqld</span></span></code></pre></div><h3 id="настроика-sqlite" tabindex="-1">Настройка SQLite <a class="header-anchor" href="#настроика-sqlite" aria-label="Permalink to &quot;Настройка SQLite&quot;">​</a></h3><p>При первом запуске, если выбрать в качестве СУБД SQLite3, то Gitea автоматически создаст базу. Никаких дополнительных настроек не требуется.</p><h3 id="настроика-tidb" tabindex="-1">Настройка TiDB <a class="header-anchor" href="#настроика-tidb" aria-label="Permalink to &quot;Настройка TiDB&quot;">​</a></h3><p>В настоящее время TiDB находится в Сизифе: <a href="https://packages.altlinux.org/ru/sisyphus/srpms/tidb/" target="_blank" rel="noreferrer">https://packages.altlinux.org/ru/sisyphus/srpms/tidb/</a> поэтому, я думаю, пока не стоит его трогать.</p><h2 id="запуск-gitea" tabindex="-1">Запуск Gitea <a class="header-anchor" href="#запуск-gitea" aria-label="Permalink to &quot;Запуск Gitea&quot;">​</a></h2><p>Редактируем конфигурационный файл:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/gitea/app.ini</span></span></code></pre></div><p>Необходимо раскомментировать строку (убрать точку с запятой):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PROTOCOL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http</span></span></code></pre></div><p>Запуск сервиса gitea:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --now</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitea</span></span></code></pre></div><p>При первом запуске Gitea по адресу localhost:3000 (или тому, который был настроен) появится меню начальной конфигурации.</p><p>Главные настройки:</p><p>Тип базы данных: выбрать базу данных, которая была создана.</p><p>Имя пользователя : gitea</p><p>Пароль: 123</p><p>Схема (если PostgreSQL): Оставить поле пустым.</p><p>Настройка учётной записи администратора: Создание учётной записи администратора необязательно. Первый зарегистрированный пользователь автоматически становится администратором.</p><h2 id="gitea-actions" tabindex="-1">Gitea Actions <a class="header-anchor" href="#gitea-actions" aria-label="Permalink to &quot;Gitea Actions&quot;">​</a></h2><p>В системе, где будет работать раннер, должен быть установлен Docker. <a href="./docker.html">Установка Docker</a></p><h3 id="получение-токена" tabindex="-1">Получение токена <a class="header-anchor" href="#получение-токена" aria-label="Permalink to &quot;Получение токена&quot;">​</a></h3><p>Вы можете получить токены разных уровней из следующих источников для создания участников соответствующего уровня:</p><ul><li>Уровень экземпляра: страница настроек администратора, например <code>&lt;your_gitea.com&gt;/-/admin/actions/runners</code>.</li><li>Уровень организации: страница настроек организации, например <code>&lt;your_gitea.com&gt;/&lt;org&gt;/settings/actions/runners</code>.</li><li>Уровень репозитория: страница настроек репозитория, например <code>&lt;your_gitea.com&gt;/&lt;owner&gt;/&lt;repo&gt;/settings/actions/runners</code>.</li></ul><p>Будем использовать уровень репозитория. Справа в верху: Создать новый раннер. Копируем Токен.</p><p><img src="'+e+`" alt=""></p><h3 id="быстрыи-старт" tabindex="-1">Быстрый старт <a class="header-anchor" href="#быстрыи-старт" aria-label="Permalink to &quot;Быстрый старт&quot;">​</a></h3><h4 id="запуск-локально" tabindex="-1">Запуск локально <a class="header-anchor" href="#запуск-локально" aria-label="Permalink to &quot;Запуск локально&quot;">​</a></h4><p>Скачайте бинарник раннера с сайта Gitea: <a href="https://dl.gitea.com/act_runner/" target="_blank" rel="noreferrer">https://dl.gitea.com/act_runner/</a></p><div class="info custom-block"><p class="custom-block-title">Информация</p><p>Я использовал файл act_runner-0.2.12-linux-amd64</p></div><p>Переименуйте его просто в act_runner.</p><p>Конфигурация выполняется с помощью файла конфигурации. Это необязательно, и если файл конфигурации не указан, будет использоваться конфигурация по умолчанию. Вы можете создать файл конфигурации, выполнив следующую команду:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./act_runner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate-config</span></span></code></pre></div><p>Конфигурация по умолчанию безопасна и не требует никаких изменений, поэтому вы можете просто использовать ее напрямую.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./act_runner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate-config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./act_runner</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [command]</span></span></code></pre></div><h5 id="регистрация-раннера" tabindex="-1">Регистрация раннера <a class="header-anchor" href="#регистрация-раннера" aria-label="Permalink to &quot;Регистрация раннера&quot;">​</a></h5><p>Перед запуском исполнителя актов требуется регистрация, поскольку исполнителю необходимо знать, откуда брать задания. Кроме того, экземпляру Gitea важно идентифицировать исполнителя.</p><p>Act Runner можно зарегистрировать, выполнив следующую команду.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./act_runner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> register</span></span></code></pre></div><p>В качестве альтернативы вы можете воспользоваться <code>--config</code>возможностью указать файл конфигурации, упомянутый в предыдущем разделе.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./act_runner</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> register</span></span></code></pre></div><p>Вам будет предложено ввести регистрационную информацию поэтапно. Включает:</p><ul><li>URL-адрес экземпляра Gitea, например <code>https://gitea.com/</code>или <code>http://192.168.8.8:3000/</code>.</li><li>Регистрационный токен.</li><li>Имя исполнителя (необязательно). Если оставить поле пустым, будет использовано имя хоста.</li><li>Метки бегунков (необязательно). Если оставить поле пустым, будут использоваться метки по умолчанию.</li></ul><p>Если вы хотите зарегистрировать раннер неинтерактивным способом, вы можете использовать для этого аргументы.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./act_runner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> register</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-interactive</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">instance_ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">registration_toke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">runner_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --labels</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">runner_label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>После регистрации участника вы увидите новый файл с именем <code>.runner</code>в текущем каталоге. В этом файле хранится регистрационная информация. Пожалуйста, не редактируйте его вручную. Если этот файл отсутствует или повреждён, вы можете просто удалить его и зарегистрировать заново.</p><p>Если вы хотите сохранить регистрационную информацию в другом месте, вы можете указать это в файле конфигурации, и не забудьте указать соответствующую <code>--config</code>опцию.</p><h5 id="запуск-в-команднои-строке" tabindex="-1">Запуск в командной строке <a class="header-anchor" href="#запуск-в-команднои-строке" aria-label="Permalink to &quot;Запуск в командной строке&quot;">​</a></h5><p>После регистрации раннера вы можете запустить его, выполнив следующую команду:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./act_runner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon</span></span></code></pre></div><p>или</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./act_runner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config.yaml</span></span></code></pre></div><p>Исполнитель будет извлекать задания из экземпляра Gitea и запускать их автоматически.</p><h5 id="запуск-с-помощью-systemd" tabindex="-1">Запуск с помощью systemd <a class="header-anchor" href="#запуск-с-помощью-systemd" aria-label="Permalink to &quot;Запуск с помощью systemd&quot;">​</a></h5><p>Act-Runner также можно запустить как службу <a href="https://en.wikipedia.org/wiki/Systemd" target="_blank" rel="noreferrer">systemd</a>. Создайте в системе непривилегированного пользователя <code>act_runner</code> и следующий файл: <code>/etc/systemd/system/act_runner.service</code>. Пути в <code>ExecStart</code>и <code>WorkingDirectory</code> возможно потребуется изменить в зависимости от того, где установлен <code>act_runner</code> исполняемый файл, его конфигурационный файл и домашний каталог пользователя <code>act_runner</code>.</p><div class="language-systemd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">systemd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[Unit]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Gitea Actions runner</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Documentation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https://gitea.com/gitea/act_runner</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">After</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">docker.service</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[Service]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ExecStart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/usr/local/bin/act_runner daemon --config /etc/act_runner/config.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ExecReload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/bin/kill -s HUP $MAINPID</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">WorkingDirectory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/var/lib/act_runner</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">TimeoutSec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">RestartSec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Restart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">act_runner</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[Install]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">WantedBy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">multi-user.target</span></span></code></pre></div><p>Затем:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># load the new systemd unit filesudo </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon-reload</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># start the service and enable it at bootsudo </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> act_runner</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --now</span></span></code></pre></div><p>При использовании Docker <code>act_runner</code>необходимо добавить пользователя в <code>docker</code>группу перед запуском сервиса. Имейте в виду, что это фактически даёт <code>act_runner</code>root-доступ к системе <a href="https://docs.docker.com/engine/security/#docker-daemon-attack-surface" target="_blank" rel="noreferrer">[1]</a>.</p><h4 id="запуск-в-docker-контеинере" tabindex="-1">Запуск в Docker контейнере <a class="header-anchor" href="#запуск-в-docker-контеинере" aria-label="Permalink to &quot;Запуск в Docker контейнере&quot;">​</a></h4><h5 id="однои-командои" tabindex="-1">Одной командой <a class="header-anchor" href="#однои-командои" aria-label="Permalink to &quot;Одной командой&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GITEA_INSTANCE_URL=https://your_gitea.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GITEA_RUNNER_REGISTRATION_TOKEN=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your_toke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/run/docker.sock:/var/run/docker.sock</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_runner_name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    docker.io/gitea/act_runner:latest</span></span></code></pre></div><h5 id="с-помощью-docker-compose" tabindex="-1">С помощью Docker Compose <a class="header-anchor" href="#с-помощью-docker-compose" aria-label="Permalink to &quot;С помощью Docker Compose&quot;">​</a></h5><p>Необходимо создать файл <code>docker-compose.yml</code>:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">	runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">		image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker.io/gitea/act_runner:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">		environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">			CONFIG_FILE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/config.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">			GITEA_INSTANCE_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${INSTANCE_URL}&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">			GITEA_RUNNER_REGISTRATION_TOKEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${REGISTRATION_TOKEN}&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">			GITEA_RUNNER_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${RUNNER_NAME}&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">			GITEA_RUNNER_LABELS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${RUNNER_LABELS}&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">		volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./config.yaml:/config.yaml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./data:/data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/var/run/docker.sock:/var/run/docker.sock</span></span></code></pre></div><p>Либо создавайте переменные окружения, что будет правильнее, либо вписывайте значения вместо переменных:</p><ul><li>GITEA_INSTANCE_URL - ЮРЛ Вашего Гитеа, например <a href="http://192.168.0.1:3000" target="_blank" rel="noreferrer">http://192.168.0.1:3000</a> (лупбэк не работает)</li><li>GITEA_RUNNER_REGISTRATION_TOKEN - Токен, который был получен ранее</li><li>GITEA_RUNNER_NAME - придумать имя раннера</li><li>GITEA_RUNNER_LABELS - необязательный лейбл, можно просто удалить</li></ul><p>Запуск Act Runner:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span></span></code></pre></div><h4 id="создание-задачи" tabindex="-1">Создание Задачи <a class="header-anchor" href="#создание-задачи" aria-label="Permalink to &quot;Создание Задачи&quot;">​</a></h4><p>В репозитории создаем файл .gitea/workflows/demo.yaml:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Gitea Actions Demo</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ gitea.actor }} is testing out Gitea Actions</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  Explore-Gitea-Actions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;The job was automatically triggered by a \${{ gitea.event_name }} event.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;This job is now running on a \${{ runner.os }} server hosted by Gitea!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;The name of your branch is \${{ gitea.ref }} and your repository is \${{ gitea.repository }}.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Check out repository code</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;The \${{ gitea.repository }} repository has been cloned to the runner.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;The workflow is now ready to test your code on the runner.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">List files in the repository</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          ls \${{ gitea.workspace }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;This job&#39;s status is \${{ job.status }}.&quot;</span></span></code></pre></div><p>После пуша в репозитории, переходим на страницу Действия, там и Увидим как это действие отработало. <img src="`+p+'" alt=""></p><p>Можно изучить логи, нажав на Нужное действие: <img src="'+h+`" alt=""></p><h3 id="раннер-на-альт-р11" tabindex="-1">Раннер на Альт Р11 <a class="header-anchor" href="#раннер-на-альт-р11" aria-label="Permalink to &quot;Раннер на Альт Р11&quot;">​</a></h3><p>Собираем Docker образ раннера на базе образа Альт Р11.</p><p>Скачайте бинарник раннера с сайта Gitea: <a href="https://dl.gitea.com/act_runner/" target="_blank" rel="noreferrer">https://dl.gitea.com/act_runner/</a></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Я использовал файл act_runner-0.2.12-linux-amd64</p></div><p>Переименуйте его просто в act_runner.</p><p>Далее необходимо создать рабочий каталог, поместить в него файл раннера. Далее в этом же каталоге создаем файл Dockerfile:</p><div class="language-Dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alt:p11</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/bin/sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /bin/sh -c </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;apt-get update &amp;&amp; apt-get install git&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./act_runner /usr/local/bin/act_runner</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./run.sh /usr/local/bin/run.sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VOLUME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [/var/run/docker.sock]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VOLUME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [/data]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;run.sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>Далее, в этой же директории создаем файл run.sh:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/env bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /data ]]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RUNNER_STATE_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${RUNNER_STATE_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.runner&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CONFIG_ARG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -z</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CONFIG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CONFIG_ARG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--config \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CONFIG_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXTRA_ARGS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -z</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GITEA_RUNNER_LABELS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  EXTRA_ARGS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXTRA_ARGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} --labels \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GITEA_RUNNER_LABELS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -z</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GITEA_RUNNER_EPHEMERAL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  EXTRA_ARGS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXTRA_ARGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} --ephemeral&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RUN_ARGS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -z</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GITEA_RUNNER_ONCE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  RUN_ARGS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RUN_ARGS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} --once&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In case no token is set, it&#39;s possible to read the token from a file, i.e. a Docker Secret</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-z</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GITEA_RUNNER_REGISTRATION_TOKEN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]] &amp;&amp; [[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GITEA_RUNNER_REGISTRATION_TOKEN_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  GITEA_RUNNER_REGISTRATION_TOKEN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GITEA_RUNNER_REGISTRATION_TOKEN_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use the same ENV variable names as https://github.com/vegardit/docker-gitea-act-runner</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$RUNNER_STATE_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$RUNNER_STATE_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is missing or not a regular file&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$RUNNER_STATE_FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  try</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">try</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  success</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # The point of this loop is to make it simple, when running both act_runner and gitea in docker,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # for the act_runner to wait a moment for gitea to become available before erroring out.  Within</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # the context of a single docker-compose, something similar could be done via healthchecks, but</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # this is more flexible.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ $success </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]] &amp;&amp; [[ $try </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-lt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${GITEA_MAX_REG_ATTEMPTS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">10} ]]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    act_runner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> register</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      --instance</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GITEA_INSTANCE_URL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      --token</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GITEA_RUNNER_REGISTRATION_TOKEN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GITEA_RUNNER_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hostname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`}&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      \${CONFIG_ARG} \${EXTRA_ARGS} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">--no-interactive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/reg.log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/reg.log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Runner registered successfully&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SUCCESS&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      success</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Waiting to retry ...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      sleep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  done</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Prevent reading the ![](/public/img/giteaalt.png)token from the act_runner process</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GITEA_RUNNER_REGISTRATION_TOKEN</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GITEA_RUNNER_REGISTRATION_TOKEN_FILE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> act_runner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> daemon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${CONFIG_ARG} \${RUN_ARGS}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Информация</p><p>Этот файл был взят из оригинально gitea act runner. Редактировать файл не нужно.</p></div><p>Теперь собираем Docker образ:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alt11runner:0.5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>Версия 0.5 потому что образ явно ещё не идеален) Вы можете писать любое название, главное потом его использовать вместо этого.</p><p>Теперь можно запустить раннер командой:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GITEA_INSTANCE_URL=https://your_gitea.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GITEA_RUNNER_REGISTRATION_TOKEN=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your_toke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/run/docker.sock:/var/run/docker.sock</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_runner_name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    alt11runner:0.5</span></span></code></pre></div><p>Или же используя Docker compose. Почему то, если вы, например, накосячили, или просто решили несколько раз сделать <code>docker compose up</code> то докер начинает нести чушь и ругается на пути, поэтому лучше каждый раз работать в новом рабочем каталоге (помогало просто его каждый раз переименовывать). Создаем файл docker-compose.yml:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">alt11runner:0.5</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      CONFIG_FILE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/config.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      GITEA_INSTANCE_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${INSTANCE_URL}&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      GITEA_RUNNER_REGISTRATION_TOKEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${REGISTRATION_TOKEN}&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      GITEA_RUNNER_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${RUNNER_NAME}&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      GITEA_RUNNER_LABELS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${RUNNER_LABELS}&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./config.yaml:/config.yaml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./data:/data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/var/run/docker.sock:/var/run/docker.sock</span></span></code></pre></div><p>И запускаем контейнер командой:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span></span></code></pre></div><p>И типа всё здорово)</p><h3 id="workflow-image-на-alt-p11" tabindex="-1">Workflow image на Alt:P11 <a class="header-anchor" href="#workflow-image-на-alt-p11" aria-label="Permalink to &quot;Workflow image на Alt:P11&quot;">​</a></h3><p>Итак, первая задача - зарегистрировать в раннере образ Альт:П11 с докерхаба. Для этого, добавляем в конфигурационный файл, в блок <code>label</code> следующую запись:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;alt-p11:docker://docker.io/library/alt:p11&quot;</span></span></code></pre></div><p>Сохраняем конфиги. Запускаем раннер.</p><p>В Gitea мы должны увидеть наш зарегистрированный раннер:</p><p><img src="`+k+`" alt=""></p><p>Там мы должны увидеть нашу метку.</p><p>Тепер создаем репозиторий и прописываем workflow файл. В качестве примера будет аналогичный workflow как в предыдущем примере, но есть несколько отличий. Пример:</p><p>.gitea/workflows/demo.yaml:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">AltP11 Actions Demo</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ gitea.actor }} is testing out Gitea Actions</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  Explore-Gitea-Actions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">alt-p11</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Install git and node</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          apt-get update &amp;&amp; apt-get install -y git node</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;The job was automatically triggered by a \${{ gitea.event_name }} event.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;This job is now running on a \${{ runner.os }} server hosted by Gitea!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;The name of your branch is \${{ gitea.ref }} and your repository is \${{ gitea.repository }}.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Check out repository code</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;The \${{ gitea.repository }} repository has been cloned to the runner.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;The workflow is now ready to test your code on the runner.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">List files in the repository</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          ls \${{ gitea.workspace }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;This job&#39;s status is \${{ job.status }}.&quot;</span></span></code></pre></div><p>Всё остально аналогично, как и обычно.</p><div class="warning custom-block"><p class="custom-block-title">Предупреждение</p><p>В связи с тем, что образ alt:p11 это не специальный образ под Actions, он пустой (просто голая система с минимальным набором пакетов), и требует установки всех необходимых зависимостей в нём, иначе ничего работать не будет.</p></div><div class="info custom-block"><p class="custom-block-title">Пояснение</p><p>Данный гайд - это самый простой вариант использования образа альта для workflow. Можно собрать свой образ с необходимым инструментарием, например. Никто этого не запрещает.</p></div><h3 id="пример-сборка-rpmbuild" tabindex="-1">Пример: сборка RPMBUILD <a class="header-anchor" href="#пример-сборка-rpmbuild" aria-label="Permalink to &quot;Пример: сборка RPMBUILD&quot;">​</a></h3><h4 id="подготовка-docker-образа-alt-p11" tabindex="-1">Подготовка Docker образа alt:p11 <a class="header-anchor" href="#подготовка-docker-образа-alt-p11" aria-label="Permalink to &quot;Подготовка Docker образа alt:p11&quot;">​</a></h4><p>Для сборки пакетов неообходимо использовать заранее подготовленный образ со всем необходимым.</p><p>Первым делом создаем рабочую директорию. Создаем файл Dockerfile с примерно следующим содержимым:</p><div class="language-Dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alt:p11</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> groupadd -r runner &amp;&amp; useradd -r -m -g runner runner</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apt-get update &amp;&amp; apt-get install git-core node rpmdevtools rpm-build gcc-c++</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> runner</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rpmdev-setuptree</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/bin/bash&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>Собираем образ:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alt-p11-rpmbuild</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>Создадим тэг, чтобы загрузить образ в локальный репозиторий:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alt-p11-rpmbuild</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:5000/alt-p11-rpmbuild</span></span></code></pre></div><h4 id="пушим-на-локальныи-репозитории-docker" tabindex="-1">Пушим на локальный репозиторий Docker <a class="header-anchor" href="#пушим-на-локальныи-репозитории-docker" aria-label="Permalink to &quot;Пушим на локальный репозиторий Docker&quot;">​</a></h4><p>Раннер понимает docker-образы, расположенные исключительно в репозитории, например <a href="./harbor.html">Harbor</a> или любом другом. В данном разделе будет развёрнут самый простой репозиторий в docker-контейнере.</p><p>Репозиторий будет локальным относительно раннера, то есть быть контейнером на том же хосте, что и сам раннер.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 5000:5000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry:3</span></span></code></pre></div><p>Загружаем ранее подготовленный образ:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:5000/alt-p11-rpmbuild</span></span></code></pre></div><h4 id="редактирования-конфигурации-раннера" tabindex="-1">Редактирования конфигурации раннера <a class="header-anchor" href="#редактирования-конфигурации-раннера" aria-label="Permalink to &quot;Редактирования конфигурации раннера&quot;">​</a></h4><p>Зарегистрируем в раннере ранее созданный образ. Для этого отредактируем файл config.yaml раннера. Необходимо добавить в блок <code>label</code> следующую запись:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;alt-p11-rpmbuild:docker://localhost:5000/alt-p11-rpmbuild&quot;</span></span></code></pre></div><p>Перезагружаем раннер.</p><p>Проверяем, что наш образ определился:</p><p><img src="`+r+`" alt=""></p><h4 id="workflow" tabindex="-1">Workflow <a class="header-anchor" href="#workflow" aria-label="Permalink to &quot;Workflow&quot;">​</a></h4><p>Для примера, будем использовать проект <a href="https://gitlab.basealt.space/alt/edu/ExampleFirstProject.git" target="_blank" rel="noreferrer">https://gitlab.basealt.space/alt/edu/ExampleFirstProject.git</a></p><p>Необходимо создать новый репозиторий, поместить в него файлы из брэнча rpmbuild-v1.</p><p>Как это сделать, можно узнать <a href="./git.html#как-клонировать-определенныи-брэнч">вот тут</a></p><p>Далее, создаем файл с примерно следующим содержанием:</p><p>.gitea/workflows/demo.yaml:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">AltP11 RPM Demo</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ gitea.actor }} is testing out Gitea Actions RPM Build</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    tags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;v*&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  Build-RPM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">alt-p11-rpmbuild</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;%_topdir    %homedir/RPM&quot; &gt; ~/.rpmmacros &amp;&amp; echo &quot;%packager   Nikita Bystrov bystrovno@basealt.ru&quot; &gt;&gt; ~/.rpmmacros</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tar cvf HelloUniverse-1.0.tar HelloUniverse</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cp HelloUniverse-1.0.tar ~/RPM/SOURCES/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cp HelloUniverse.spec ~/RPM/SPECS/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rpmbuild -ba ~/RPM/SPECS/HelloUniverse.spec</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Release</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">softprops/action-gh-release@v2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">github.ref_type == &#39;tag&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            /home/runner/RPM/RPMS/x86_64/HelloUniverse-1.0-alt1.x86_64.rpm</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            /home/runner/RPM/RPMS/x86_64/HelloUniverse-debuginfo-1.0-alt1.x86_64.rpm</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            /home/runner/RPM/SRPMS/HelloUniverse-1.0-alt1.src.rpm</span></span></code></pre></div><p>В итоге должно получиться примерно следующее:</p><p><img src="`+d+'" alt="alt text"></p><p>(Если нет файла Readme, это не проблема)</p><h4 id="сборка-и-релиз" tabindex="-1">Сборка и релиз <a class="header-anchor" href="#сборка-и-релиз" aria-label="Permalink to &quot;Сборка и релиз&quot;">​</a></h4><p>Итак, в файле <code>.gitea/workflows/demo.yaml</code> было указано, что этот workflow будет запускаться только тогда, когда он пушится в тэг. Поэтому теперь задача этот тэг создать. Сделано это затем, чтобы сборка происходила только при создании релиза.</p><p>Заходим в раздел Релизы:</p><p><img src="'+o+'" alt="alt text"></p><p>Справа вверху кнопка Новый релиз. Нажимаем её и переходим в создание релиза.</p><p>Минимально достаточно лишь придумать номер тэга. В нашем случае, в workflow файле было указано правило, что сборка будет произведена только тогда, когда номер тэга будет в виде например: v0.0.1</p><p><img src="'+c+'" alt="alt text"></p><p>Указываем номер тэга и нажимаем внизу Создать только тэг.</p><p>Сразу же запустится Действие.</p><p><img src="'+g+'" alt="alt text"></p><p>После его завершения, если зайти в раздел Релизы, то можно будет увидеть созданный релиз, в котором будут содержаться как исходные коды, так и собранные пакеты:</p><p><img src="'+E+`" alt="alt text"></p><h3 id="пример-сборка-hasher" tabindex="-1">Пример: сборка HASHER <a class="header-anchor" href="#пример-сборка-hasher" aria-label="Permalink to &quot;Пример: сборка HASHER&quot;">​</a></h3><p>Требует изменение образа alt-p11-rpmbuild, создадим отдельный образ</p><h3 id="пример-сборка-gear" tabindex="-1">Пример: сборка GEAR <a class="header-anchor" href="#пример-сборка-gear" aria-label="Permalink to &quot;Пример: сборка GEAR&quot;">​</a></h3><p>Требует изменение образа alt-p11-rpmbuild, создадим отдельный образ</p><p>Есть два варианта работы Gear, в связке с:</p><ul><li>rpmbuild</li><li>hasher</li></ul><h3 id="запуск-раннера-с-помощью-podman" tabindex="-1">Запуск раннера с помощью Podman <a class="header-anchor" href="#запуск-раннера-с-помощью-podman" aria-label="Permalink to &quot;Запуск раннера с помощью Podman&quot;">​</a></h3><h4 id="однои-командои-1" tabindex="-1">Одной командой <a class="header-anchor" href="#однои-командои-1" aria-label="Permalink to &quot;Одной командой&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GITEA_INSTANCE_URL=http://gitea:3000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GITEA_RUNNER_REGISTRATION_TOKEN=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">token</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> goes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> her</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GITEA_RUNNER_NAME=gitea_runner</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DOCKER_HOST=unix:///run/podman/podman.sock</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /run/podman/podman.sock:/run/podman/podman.sock</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitea_podman_runner</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    docker.io/gitea/act_runner:latest</span></span></code></pre></div><h4 id="podman-compose" tabindex="-1">Podman Compose <a class="header-anchor" href="#podman-compose" aria-label="Permalink to &quot;Podman Compose&quot;">​</a></h4><h2 id="фаил-config-yaml" tabindex="-1">Файл config.yaml <a class="header-anchor" href="#фаил-config-yaml" aria-label="Permalink to &quot;Файл config.yaml&quot;">​</a></h2><details><summary>Показать код</summary><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Пример файла конфигурации, можно безопасно использовать этот файл как стандартную конфигурацию без изменений.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Не обязательно копировать этот файл в свою систему,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># можно просто выполнить \`./act_runner generate-config &gt; config.yaml\` для генерации файла конфигурации.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Уровень логирования, возможные значения: trace, debug, info, warn, error, fatal</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">info</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Где сохранять результат регистрации.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.runner</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Сколько задач выполнять одновременно.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Дополнительные переменные окружения для выполнения задач.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  envs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    A_TEST_ENV_NAME_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">a_test_env_value_1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    A_TEST_ENV_NAME_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">a_test_env_value_2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Дополнительные переменные окружения из файла для выполнения задач.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Будет проигнорировано, если файл пуст или не существует.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  env_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.env</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Таймаут завершения задачи.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Обратите внимание, что экземпляр Gitea также имеет таймаут (по умолчанию 3ч) для задачи.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Поэтому задача может быть остановлена экземпляром Gitea, если его таймаут короче этого.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3h</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Таймаут ожидания завершения выполняющихся задач при остановке runner&#39;а.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Все выполняющиеся задачи, не завершившиеся за это время, будут отменены.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  shutdown_timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0s</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Пропускать проверку TLS-сертификата экземпляра Gitea.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  insecure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Таймаут получения задачи от экземпляра Gitea.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  fetch_timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">5s</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Интервал опроса экземпляра Gitea для получения задач.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  fetch_interval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2s</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Метки runner&#39;а определяют, какие задачи он может выполнять и как их выполнять.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Например: &quot;macos-arm64:host&quot; или &quot;ubuntu-latest:docker://docker.gitea.com/runner-images:ubuntu-latest&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Больше образов от Gitea можно найти на https://gitea.com/docker.gitea.com/runner-images .</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Если оставить пустым при регистрации, будет запрошен ввод меток.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Если оставить пустым при выполнении \`daemon\`, будут использованы метки из файла \`.runner\`.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  labels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ubuntu-latest:docker://docker.gitea.com/runner-images:ubuntu-latest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ubuntu-22.04:docker://docker.gitea.com/runner-images:ubuntu-22.04&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ubuntu-20.04:docker://docker.gitea.com/runner-images:ubuntu-20.04&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Включить сервер кеширования для использования actions/cache.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Директория для хранения кешированных данных.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Если оставить пустым, данные будут храниться в $HOME/.cache/actcache.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Хост сервера кеширования.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Это не адрес для прослушивания, а адрес для подключения из контейнеров задач.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Поэтому 0.0.0.0 - плохой выбор, оставьте пустым для автоматического определения.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Порт сервера кеширования.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 0 означает использование случайного доступного порта.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # URL внешнего сервера кеширования. Действует только при enabled: true.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Если указан, act_runner будет использовать этот URL как ACTIONS_CACHE_URL вместо запуска собственного сервера.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # URL обычно должен оканчиваться на &quot;/&quot;.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  external_server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Указывает сеть, к которой будет подключен контейнер.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Может быть host, bridge или имя пользовательской сети.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Если оставить пустым, act_runner создаст сеть автоматически.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  network</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Использовать ли привилегированный режим при запуске контейнеров задач (требуется для Docker-in-Docker).</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  privileged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Дополнительные опции при запуске контейнера (например, --add-host=my.gitea.url:host-gateway).</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Родительская директория рабочей директории задачи.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # ПРИМЕЧАНИЕ: Не нужно добавлять первый &#39;/&#39; в пути, так как act_runner добавит его автоматически.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Если путь начинается с &#39;/&#39;, этот &#39;/&#39; будет удален.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Например, если родительская директория /path/to/my/dir, workdir_parent должен быть path/to/my/dir</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Если оставить пустым, будет использоваться /workspace.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  workdir_parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Тома (включая bind mounts) могут быть подключены к контейнерам. Поддерживается glob-синтаксис, см. https://github.com/gobwas/glob</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Можно указать несколько томов. Если последовательность пуста, тома не могут быть подключены.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Например, если разрешить контейнерам монтировать только том \`data\` и все json-файлы в \`/src\`, конфигурация должна быть:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # valid_volumes:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   - data</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   - /src/*.json</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Если нужно разрешить любые тома, используйте следующую конфигурацию:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # valid_volumes:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #   - &#39;**&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  valid_volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: []</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Переопределяет хост docker client указанным.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Если оставить пустым, act_runner найдет доступный docker host автоматически.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Если указано &quot;-&quot;, act_runner найдет доступный docker host автоматически, но он не будет подключен к контейнерам задач и сервисным контейнерам.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Если не пусто и не &quot;-&quot;, будет использован указанный docker host. Если он не работает, будет возвращена ошибка.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  docker_host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Принудительно загружать образ(ы) Docker, даже если они уже есть</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  force_pull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Пересобирать образ(ы) Docker, даже если они уже есть</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  force_rebuild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Родительская директория рабочей директории задачи.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Если оставить пустым, будет использоваться $HOME/.cache/act/.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  workdir_parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div></details><h2 id="настроика-fail2ban" tabindex="-1">Настройка Fail2ban <a class="header-anchor" href="#настроика-fail2ban" aria-label="Permalink to &quot;Настройка Fail2ban&quot;">​</a></h2><p>Помните, что fail2ban — мощный инструмент, и при неправильном использовании он может вызвать множество проблем, поэтому обязательно протестируйте его, прежде чем полагаться на него, чтобы не оказаться в затруднительном положении.</p><p>Gitea возвращает HTTP 200 для неудачных попыток входа в веб-журналы, но если у вас есть параметры ведения журнала в <code>app.ini</code>, то вы должны иметь возможность выйти из <code>log/gitea.log</code>.</p><p>Добавьте наш фильтр в <code>/etc/fail2ban/filter.d/gitea.local</code>:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># gitea.local</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[Definition]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">failregex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =  .*(Failed authentication attempt|invalid credentials|Attempted access of unknown user).* from &lt;HOST&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ignoreregex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span></span></code></pre></div><p>Добавьте нашу тюрьму в <code>/etc/fail2ban/jail.d/gitea.local</code>:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[gitea]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = gitea</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">logpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = /var/lib/gitea/log/gitea.log</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">maxretry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">findtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 3600</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bantime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 900</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = iptables-allports</span></span></code></pre></div><p>Если вы используете Docker, вам также потребуется добавить дополнительную джейл для обработки цепочки FORWARD в iptables . Настройте её в <code>/etc/fail2ban/jail.d/gitea-docker.local</code>:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[gitea-docker]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = gitea</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">logpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = /var/lib/gitea/log/gitea.log</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">maxretry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">findtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 3600</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bantime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 900</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = iptables-allports[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">chain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;FORWARD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>Затем просто запустите <code>systemctl restart fail2ban</code>, чтобы применить изменения. Вы можете проверить, принял ли fail2ban вашу конфигурацию, с помощью <code>systemctl status fail2ban</code>.</p><p>Обязательно изучите fail2ban и настройте его под свои нужды. Он банит кого-то на 15 минут (на всех портах), если он не пройдет аутентификацию 10 раз в час.</p><p>Если вы запускаете Gitea через обратный прокси-сервер с Nginx (например, с Docker), вам необходимо добавить это в конфигурацию Nginx, чтобы IP-адреса не отображались как <code>127.0.0.1</code>:</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Real-IP $remote_addr;</span></span></code></pre></div><p>Необходимо настроить параметры безопасности <code>app.ini</code>, чтобы обеспечить интерпретацию заголовков, а также списка IP-адресов и сетей, описывающих доверенные прокси-серверы.</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REVERSE_PROXY_LIMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REVERSE_PROXY_TRUSTED_PROXIES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 127.0.0.1/8 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; 172.17.0.0/16 for the docker default network</span></span></code></pre></div><h2 id="добавление-юридическои-страницы-политика-конфиденциальности" tabindex="-1">Добавление юридической страницы (Политика конфиденциальности) <a class="header-anchor" href="#добавление-юридическои-страницы-политика-конфиденциальности" aria-label="Permalink to &quot;Добавление юридической страницы (Политика конфиденциальности)&quot;">​</a></h2><p>Создаем директорию откуда Gitea будет брать файл политики:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/lib/gitea/custom/public/assets/</span></span></code></pre></div><p>Скачиваем шаблон политики:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/lib/gitea/custom/public/assets/privacy.html</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://raw.githubusercontent.com/go-gitea/gitea/main/contrib/legal/privacy.html.sample</span></span></code></pre></div><p>Далее этот шаблон необходимо отредактировать под свои нужды.</p><p>Создаем директорию для расширения HTML:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/lib/gitea/custom/templates/custom/</span></span></code></pre></div><p>Создаем файл расширения HTML для внедрения ссылки на политику в футер Gitea:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;a class=&quot;item&quot; href=&quot;{{AppSubUrl}}/assets/privacy.html&quot;&gt;Политика конфиденциальности&lt;/a&gt;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/lib/gitea/custom/templates/custom/extra_links_footer.tmpl</span></span></code></pre></div><p>Перезагружаем сервис Gitea</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitea</span></span></code></pre></div><h2 id="фаилы-readme-профиля" tabindex="-1">Файлы README профиля <a class="header-anchor" href="#фаилы-readme-профиля" aria-label="Permalink to &quot;Файлы README профиля&quot;">​</a></h2><p>Чтобы отобразить файл Markdown на странице профиля пользователя или организации Gitea, создайте репозиторий с именем <code>.profile</code>и добавьте в него новый файл с именем <code>README.md</code>. Gitea автоматически отобразит содержимое файла в вашем профиле, в новой области «Обзор» над вашими репозиториями.</p><p>Если сделать <code>.profile</code>репозиторий закрытым, файл README профиля будет скрыт.</p><hr><h2 id="далее-лишь-бункер-неотработанного-материала" tabindex="-1">Далее лишь бункер неотработанного материала. <a class="header-anchor" href="#далее-лишь-бункер-неотработанного-материала" aria-label="Permalink to &quot;Далее лишь бункер неотработанного материала.&quot;">​</a></h2><h3 id="cron-cron" tabindex="-1">Cron (<code>cron</code>) <a class="header-anchor" href="#cron-cron" aria-label="Permalink to &quot;Cron (\`cron\`)&quot;">​</a></h3><ul><li><code>ENABLED</code>: <strong>false</strong>: Включить периодическое выполнение всех cron-задач с настройками по умолчанию.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать cron-задачи при старте приложения.</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Установите <code>true</code>, чтобы включить уведомления об успешном выполнении.</li><li><code>SCHEDULE</code> поддерживает форматы: <ul><li>Полные crontab-спецификации, например, <code>* * * * * ?</code></li><li>Дескрипторы, например, <code>@midnight</code>, <code>@every 1h30m</code> ...</li><li>Подробнее: <a href="https://pkg.go.dev/github.com/gogs/cron@v0.0.0-20171120032916-9f6c956d3e14" target="_blank" rel="noreferrer">документация cron</a></li></ul></li></ul><h3 id="базовые-cron-задачи-—-включены-по-умолчанию" tabindex="-1">Базовые cron-задачи — включены по умолчанию <a class="header-anchor" href="#базовые-cron-задачи-—-включены-по-умолчанию" aria-label="Permalink to &quot;Базовые cron-задачи — включены по умолчанию&quot;">​</a></h3><p>Cron - Очистка старых архивов репозиториев (<code>cron.archive_cleanup</code>)</p><ul><li><code>ENABLED</code>: <strong>true</strong>: Включить сервис.</li><li><code>RUN_AT_START</code>: <strong>true</strong>: Запускать задачи при старте (если <code>ENABLED</code>).</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Выводить ли уведомление при успешном выполнении.</li><li><code>SCHEDULE</code>: <strong>@midnight</strong>: Cron-синтаксис для очистки архивов репозиториев, например, <code>@every 1h</code>.</li><li><code>OLDER_THAN</code>: <strong>24h</strong>: Архивы, созданные более <code>OLDER_THAN</code> назад, будут удалены, например, <code>12h</code>.</li><li>Удаляет временные архивы (.zip, .tar.gz), созданные при скачивании репозиториев.</li><li>Без этой задачи дисковое пространство может постепенно заполняться ненужными файлами.</li></ul><p>Cron - Обновление зеркал (<code>cron.update_mirrors</code>)</p><ul><li><code>ENABLED</code>: <strong>true</strong>: Включить периодическое выполнение задачи обновления зеркал.</li><li><code>SCHEDULE</code>: <strong>@every 10m</strong>: Cron-синтаксис для обновления зеркал, например, <code>@every 3h</code>.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать задачу при старте Gitea.</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять только при ошибках.</li><li><code>PULL_LIMIT</code>: <strong>50</strong>: Ограничить количество зеркал, добавляемых в очередь (отрицательные значения — без ограничений, <code>0</code> отключает обновление pull-зеркал).</li><li><code>PUSH_LIMIT</code>: <strong>50</strong>: Ограничить количество push-зеркал, добавляемых в очередь (отрицательные значения — без ограничений, <code>0</code> отключает обновление push-зеркал).</li><li>Проверяет обновления в зеркалах (mirror repositories) и синхронизирует их.</li><li>Если у тебя есть зеркала репозиториев, теперь они не будут автоматически обновляться.(походу этот параметр перебивает базовое зеркалирование.)</li></ul><p>Cron - Проверка здоровья репозиториев (<code>cron.repo_health_check</code>)</p><ul><li><code>ENABLED</code>: <strong>true</strong>: Включить периодическую проверку здоровья репозиториев.</li><li><code>SCHEDULE</code>: <strong>@midnight</strong>: Cron-синтаксис для проверки здоровья репозиториев.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать задачу при старте Gitea.</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять только при ошибках.</li><li><code>TIMEOUT</code>: <strong>60s</strong>: Максимальное время выполнения проверки.</li><li><code>ARGS</code>: <strong><em>empty</em></strong>: Аргументы для команды <code>git fsck</code>, например, <code>--unreachable --tags</code>. Подробнее: <a href="http://git-scm.com/docs/git-fsck" target="_blank" rel="noreferrer">http://git-scm.com/docs/git-fsck</a></li><li>Проверяет репозитории на повреждения (например, отсутствующие файлы или некорректные коммиты).</li><li>Если репозитории работают стабильно, проблем не будет, но в долгосрочной перспективе могут появиться “битые” репозитории, если что-то сломается.</li></ul><p>Cron - Проверка статистики репозиториев (<code>cron.check_repo_stats</code>)</p><ul><li><code>SCHEDULE</code>: <strong>@midnight</strong>: Cron-синтаксис для проверки статистики репозиториев.</li><li><code>ENABLED</code>: <strong>true</strong>: Включить периодическую проверку.</li><li><code>RUN_AT_START</code>: <strong>true</strong>: Запускать задачу при старте Gitea.</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять только при ошибках.</li><li>Пересчитывает количество коммитов, изменений, контрибьюторов.</li></ul><p>Cron - Очистка таблицы <code>hook_task</code> (<code>cron.cleanup_hook_task_table</code>)</p><ul><li><code>ENABLED</code>: <strong>true</strong>: Включить очистку таблицы <code>hook_task</code>.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать очистку при старте (если <code>ENABLED</code>).</li><li><code>SCHEDULE</code>: <strong>@midnight</strong>: Cron-синтаксис для очистки таблицы.</li><li><code>CLEANUP_TYPE</code> <strong>OlderThan</strong>: Метод очистки: по возрасту (<code>OlderThan</code>) или количеству записей на вебхук (<code>PerWebhook</code>).</li><li><code>OLDER_THAN</code>: <strong>168h</strong>: Если <code>CLEANUP_TYPE = OlderThan</code>, записи старше этого значения будут удалены.</li><li><code>NUMBER_TO_KEEP</code>: <strong>10</strong>: Если <code>CLEANUP_TYPE = PerWebhook</code>, сохранять последние <code>N</code> записей для каждого вебхука.</li><li>Удаляет старые уведомления о системных событиях.</li><li>Если у тебя много пользователей, база данных может расти из-за ненужных логов.</li></ul><p>Cron - Очистка просроченных пакетов (<code>cron.cleanup_packages</code>)</p><ul><li><code>ENABLED</code>: <strong>true</strong>: Включить очистку просроченных пакетов.</li><li><code>RUN_AT_START</code>: <strong>true</strong>: Запускать задачу при старте (если <code>ENABLED</code>).</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять при каждом выполнении.</li><li><code>SCHEDULE</code>: <strong>@midnight</strong>: Cron-синтаксис для задачи.</li><li><code>OLDER_THAN</code>: <strong>24h</strong>: Данные пакетов, не имеющие ссылок и созданные более <code>OLDER_THAN</code> назад, будут удалены.</li><li>Очищает устаревшие пакеты из Gitea Package Registry.</li><li>Если ты используешь Gitea для хранения артефактов (например, Docker-образов, Maven-пакетов), они могут оставаться в системе навсегда.</li></ul><p>Cron - Обновление <code>poster_id</code> в мигрированных репозиториях (<code>cron.update_migration_poster_id</code>)</p><p>Обновляет <code>poster_id</code> в issues и комментариях мигрированных репозиториев. Всегда выполняется при старте сервера.</p><ul><li><code>ENABLED</code>: <strong>true</strong>: Включить задачу.</li><li><code>RUN_AT_START</code>: <strong>true</strong>: Обновлять <code>poster_id</code> при старте сервера.</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять только при ошибках.</li><li><code>SCHEDULE</code>: <strong>@midnight</strong>: Интервал между синхронизациями (всегда выполняется при старте).</li></ul><p>Cron - Синхронизация внешних пользователей (<code>cron.sync_external_users</code>)</p><p>Синхронизация данных внешних пользователей (поддерживается только LDAP).</p><ul><li><code>ENABLED</code>: <strong>true</strong>: Включить синхронизацию.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Синхронизировать при старте сервера.</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять только при ошибках.</li><li><code>SCHEDULE</code>: <strong>@midnight</strong>: Интервал между синхронизациями (всегда выполняется при старте).</li><li><code>UPDATE_EXISTING</code>: <strong>true</strong>: Создавать новых пользователей, обновлять существующих и отключать отсутствующих во внешнем источнике. Если <code>false</code> — только создавать новых.</li></ul><p>Cron - Очистка просроченных ассетов Actions (<code>cron.cleanup_actions</code>)</p><ul><li><code>ENABLED</code>: <strong>true</strong>: Включить очистку.</li><li><code>RUN_AT_START</code>: <strong>true</strong>: Запускать задачу при старте (если <code>ENABLED</code>).</li><li><code>SCHEDULE</code>: <strong>@midnight</strong>: Cron-синтаксис для задачи.</li></ul><p>Cron - Очистка удалённых веток (<code>cron.deleted_branches_cleanup</code>)</p><ul><li><code>ENABLED</code>: <strong>true</strong>: Включить очистку.</li><li><code>RUN_AT_START</code>: <strong>true</strong>: Запускать задачу при старте (если <code>ENABLED</code>).</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять при успешном выполнении.</li><li><code>SCHEDULE</code>: <strong>@midnight</strong>: Cron-синтаксис для очистки.</li><li><code>OLDER_THAN</code>: <strong>24h</strong>: Ветки, удалённые более <code>OLDER_THAN</code> назад, будут очищены.</li><li>Удаляет метаданные о ветках, которые были удалены.</li><li>Без этой задачи дисковое пространство может постепенно заполняться ненужными файлами.</li></ul><h3 id="расширенные-cron-задачи" tabindex="-1">Расширенные cron-задачи <a class="header-anchor" href="#расширенные-cron-задачи" aria-label="Permalink to &quot;Расширенные cron-задачи&quot;">​</a></h3><p>Cron - Удаление всех архивов репозиториев (<code>cron.delete_repo_archives</code>)</p><ul><li><code>ENABLED</code>: <strong>false</strong>: Включить сервис.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать задачу при старте (если <code>ENABLED</code>).</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять при успешном выполнении.</li><li><code>SCHEDULE</code>: <strong>@annually</strong>: Cron-расписание для удаления архивов, например, <code>@annually</code>.</li></ul><p>Cron - Git GC для всех репозиториев (<code>cron.git_gc_repos</code>)</p><ul><li><code>ENABLED</code>: <strong>false</strong>: Включить сервис.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать задачу при старте (если <code>ENABLED</code>).</li><li><code>SCHEDULE</code>: <strong>@every 72h</strong>: Cron-синтаксис для задачи, например, <code>@every 1h</code>.</li><li><code>TIMEOUT</code>: <strong>60s</strong>: Максимальное время выполнения <code>git gc</code>.</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять при успешном выполнении.</li><li><code>ARGS</code>: <strong><em>empty</em></strong>: Аргументы для <code>git gc</code>, например, <code>--aggressive --auto</code>. По умолчанию совпадает с <code>[git] -&gt; GC_ARGS</code>.</li><li>Запускает git gc (сборщик мусора) для репозиториев, чтобы оптимизировать их размер.</li><li>Если ты часто пушишь большие файлы, размер репозиториев может расти быстрее, чем обычно.</li></ul><p>Cron - Обновление <code>authorized_keys</code> SSH-ключами Gitea (<code>cron.resync_all_sshkeys</code>)</p><ul><li><code>ENABLED</code>: <strong>false</strong>: Включить сервис.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать задачу при старте (если <code>ENABLED</code>).</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять при успешном выполнении.</li><li><code>SCHEDULE</code>: <strong>@every 72h</strong>: Cron-синтаксис для задачи, например, <code>@every 1h</code>.</li></ul><p>Cron - Ресинхронизация хуков всех репозиториев (<code>cron.resync_all_hooks</code>)</p><ul><li><code>ENABLED</code>: <strong>false</strong>: Включить сервис.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать задачу при старте (если <code>ENABLED</code>).</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять при успешном выполнении.</li><li><code>SCHEDULE</code>: <strong>@every 72h</strong>: Cron-синтаксис для задачи, например, <code>@every 1h</code>.</li></ul><p>Cron - Повторная инициализация отсутствующих Git-репозиториев (<code>cron.reinit_missing_repos</code>)</p><ul><li><code>ENABLED</code>: <strong>false</strong>: Включить сервис.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать задачу при старте (если <code>ENABLED</code>).</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять при успешном выполнении.</li><li><code>SCHEDULE</code>: <strong>@every 72h</strong>: Cron-синтаксис для задачи, например, <code>@every 1h</code>.</li></ul><p>Cron - Удаление репозиториев без Git-файлов (<code>cron.delete_missing_repos</code>)</p><ul><li><code>ENABLED</code>: <strong>false</strong>: Включить сервис.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать задачу при старте (если <code>ENABLED</code>).</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять при успешном выполнении.</li><li><code>SCHEDULE</code>: <strong>@every 72h</strong>: Cron-синтаксис для задачи, например, <code>@every 1h</code>.</li></ul><p>Cron - Удаление сгенерированных аватаров репозиториев (<code>cron.delete_generated_repository_avatars</code>)</p><ul><li><code>ENABLED</code>: <strong>false</strong>: Включить сервис.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать задачу при старте (если <code>ENABLED</code>).</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять при успешном выполнении.</li><li><code>SCHEDULE</code>: <strong>@every 72h</strong>: Cron-синтаксис для задачи, например, <code>@every 1h</code>.</li></ul><p>Cron - Удаление старых Actions из БД (<code>cron.delete_old_actions</code>)</p><ul><li><code>ENABLED</code>: <strong>false</strong>: Включить сервис.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать задачу при старте (если <code>ENABLED</code>).</li><li><code>NOTICE_ON_SUCCESS</code>: <strong>false</strong>: Уведомлять при успешном выполнении.</li><li><code>SCHEDULE</code>: <strong>@every 168h</strong>: Интервал проверки.</li><li><code>OLDER_THAN</code>: <strong>8760h</strong>: Удалять Actions старше этого значения (рекомендуется <code>8760h</code> — 1 год, так как это максимум для heatmap).</li></ul><p>Cron - Проверка новых версий Gitea (<code>cron.update_checker</code>)</p><ul><li><code>ENABLED</code>: <strong>true</strong>: Включить сервис.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать задачу при старте (если <code>ENABLED</code>).</li><li><code>ENABLE_SUCCESS_NOTICE</code>: <strong>true</strong>: Отключить уведомления об успехе, если <code>false</code>.</li><li><code>SCHEDULE</code>: <strong>@every 168h</strong>: Cron-синтаксис для задачи, например, <code>@every 168h</code>.</li><li><code>HTTP_ENDPOINT</code>: <strong><a href="https://dl.gitea.com/gitea/version.json" target="_blank" rel="noreferrer">https://dl.gitea.com/gitea/version.json</a></strong>: Эндпоинт для проверки новых версий.</li></ul><p>Cron - Удаление старых системных уведомлений (<code>cron.delete_old_system_notices</code>)</p><ul><li><code>ENABLED</code>: <strong>false</strong>: Включить сервис.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать задачу при старте (если <code>ENABLED</code>).</li><li><code>NO_SUCCESS_NOTICE</code>: <strong>false</strong>: Отключить уведомления об успехе, если <code>true</code>.</li><li><code>SCHEDULE</code>: <strong>@every 168h</strong>: Интервал проверки.</li><li><code>OLDER_THAN</code>: <strong>8760h</strong>: Удалять уведомления старше этого значения.</li></ul><p>Cron - Git LFS GC в репозиториях (<code>cron.gc_lfs</code>)</p><ul><li><code>ENABLED</code>: <strong>false</strong>: Включить сервис.</li><li><code>RUN_AT_START</code>: <strong>false</strong>: Запускать задачу при старте (если <code>ENABLED</code>).</li><li><code>SCHEDULE</code>: <strong>@every 24h</strong>: Интервал проверки.</li><li><code>OLDER_THAN</code>: <strong>168h</strong>: Удалять LFS-объекты старше 7 дней.</li><li><code>LAST_UPDATED_MORE_THAN_AGO</code>: <strong>72h</strong>: Проверять только объекты, не обновлявшиеся более 3 дней.</li><li><code>NUMBER_TO_CHECK_PER_REPO</code>: <strong>100</strong>: Минимальное количество проверяемых объектов на репозиторий (<code>0</code> — проверять все).</li><li><code>PROPORTION_TO_CHECK_PER_REPO</code>: <strong>0.6</strong>: Проверять как минимум эту долю объектов на репозиторий (может привести к полной проверке).</li><li>Удаляет устаревшие файлы из Git LFS (если используется).</li><li>Если у тебя включен Git LFS, репозитории могут занимать больше места, чем нужно.</li></ul><p><strong>Эти задачи отсутствуют в официальной документации, но есть на просторах интернета</strong></p><p>Задача <code>start_schedule_tasks</code></p><ul><li>Задача <code>start_schedule_tasks</code> в Gitea отвечает за <strong>запуск всех запланированных фоновых задач</strong>, которые должны выполняться через определенные интервалы времени. Она запускается <strong>каждую минуту</strong>.</li></ul><p>Задачи <code>stop_zombie_tasks</code> и <code>stop_endless_tasks</code></p><ul><li>Останавливает фоновые задачи, которые зависли или выполняются бесконечно.</li><li>Если в Gitea зависнет процесс (например, Git-команда или индексация), он может остаться активным навсегда и жрать ресурсы.</li></ul><h2 id="использование-api" tabindex="-1">Использование API <a class="header-anchor" href="#использование-api" aria-label="Permalink to &quot;Использование API&quot;">​</a></h2><p>Включение/настройка По умолчанию <code>ENABLE_SWAGGER</code> установлено значение <code>true</code> и <code>MAX_RESPONSE_ITEMS</code> равное <code>50</code>.</p><h3 id="аутентификация" tabindex="-1">Аутентификация <a class="header-anchor" href="#аутентификация" aria-label="Permalink to &quot;Аутентификация&quot;">​</a></h3><p>Gitea поддерживает следующие методы аутентификации API:</p><p>Базовая HTTP-аутентификация<br><code>token=...</code> параметр в строке запроса URL<br><code>access_token=...</code> параметр в строке запроса URL<br><code>Authorization: token ...</code> заголовок в заголовках HTTP</p><p>Все эти методы принимают один и тот же тип токена API-ключа.</p><h3 id="генерация-токена" tabindex="-1">Генерация токена <a class="header-anchor" href="#генерация-токена" aria-label="Permalink to &quot;Генерация токена&quot;">​</a></h3><p>Вы можете создать токен API через веб-интерфейс вашей установки Gitea: Настройки - Приложения - Создать новый токен.</p><p><img src="`+y+'" alt="alt text"></p>',303)]))}const v=i(F,[["render",u]]);export{B as __pageData,v as default};
