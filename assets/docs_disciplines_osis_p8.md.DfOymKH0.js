import{_ as a,c as i,o as n,ag as t}from"./chunks/framework.D4Vqf8I7.js";const g=JSON.parse('{"title":"Лекция: Этапы загрузки Linux и практическое исследование с помощью dmesg и других инструментов","description":"","frontmatter":{},"headers":[],"relativePath":"docs/disciplines/osis/p8.md","filePath":"docs/disciplines/osis/p8.md","lastUpdated":1757673834000}'),e={name:"docs/disciplines/osis/p8.md"};function l(p,s,h,r,o,d){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="лекция-этапы-загрузки-linux-и-практическое-исследование-с-помощью-dmesg-и-других-инструментов" tabindex="-1"><strong>Лекция: Этапы загрузки Linux и практическое исследование с помощью dmesg и других инструментов</strong> <a class="header-anchor" href="#лекция-этапы-загрузки-linux-и-практическое-исследование-с-помощью-dmesg-и-других-инструментов" aria-label="Permalink to &quot;**Лекция: Этапы загрузки Linux и практическое исследование с помощью dmesg и других инструментов**&quot;">​</a></h1><hr><h2 id="введение" tabindex="-1"><strong>Введение</strong> <a class="header-anchor" href="#введение" aria-label="Permalink to &quot;**Введение**&quot;">​</a></h2><p>Загрузка операционной системы — это сложный, но хорошо структурированный процесс. Понимание этапов загрузки Linux необходимо системным администраторам, разработчикам и специалистам по безопасности для диагностики проблем, оптимизации производительности и глубокого понимания работы системы.</p><p>В этой лекции мы:</p><ul><li>Разберём пошагово процесс загрузки Linux.</li><li>Изучим ключевые компоненты: BIOS/UEFI, загрузчик (GRUB), ядро (kernel), initramfs, init-систему (systemd).</li><li>Научимся использовать практические инструменты: <code>dmesg</code>, <code>journalctl</code>, <code>systemctl</code>, <code>lsinitramfs</code>, <code>grub-editenv</code> и другие.</li><li>Проведём реальные эксперименты для анализа каждого этапа.</li></ul><hr><h2 id="_1-этапы-загрузки-linux-обзор" tabindex="-1"><strong>1. Этапы загрузки Linux: обзор</strong> <a class="header-anchor" href="#_1-этапы-загрузки-linux-обзор" aria-label="Permalink to &quot;**1. Этапы загрузки Linux: обзор**&quot;">​</a></h2><p>Процесс загрузки Linux можно разделить на <strong>5 основных этапов</strong>:</p><ol><li><strong>BIOS/UEFI</strong> — инициализация оборудования.</li><li><strong>Загрузчик (Bootloader)</strong> — загрузка ядра и initramfs.</li><li><strong>Ядро (Kernel)</strong> — инициализация подсистем, монтирование корневой ФС.</li><li><strong>initramfs</strong> — временная корневая файловая система.</li><li><strong>Пользовательское пространство (init/systemd)</strong> — запуск сервисов и вход в систему.</li></ol><p>Рассмотрим каждый этап подробно.</p><hr><h2 id="_2-этап-1-bios-uefi" tabindex="-1"><strong>2. Этап 1: BIOS/UEFI</strong> <a class="header-anchor" href="#_2-этап-1-bios-uefi" aria-label="Permalink to &quot;**2. Этап 1: BIOS/UEFI**&quot;">​</a></h2><h3 id="теория" tabindex="-1"><strong>Теория</strong> <a class="header-anchor" href="#теория" aria-label="Permalink to &quot;**Теория**&quot;">​</a></h3><ul><li>При включении компьютера срабатывает <strong>BIOS</strong> (на старых системах) или <strong>UEFI</strong> (на современных).</li><li>BIOS/UEFI выполняет POST (Power-On Self Test) — проверку оборудования.</li><li>Затем ищется загрузочное устройство (HDD, SSD, USB и т.д.).</li><li>Передаёт управление <strong>загрузчику</strong>, который находится в MBR (Master Boot Record) или EFI-разделе.</li></ul><blockquote><p>⚠️ UEFI заменяет BIOS, поддерживает GPT, безопасную загрузку (Secure Boot), быстрый старт.</p></blockquote><h3 id="практика" tabindex="-1"><strong>Практика</strong> <a class="header-anchor" href="#практика" aria-label="Permalink to &quot;**Практика**&quot;">​</a></h3><p>Посмотреть информацию о режиме загрузки:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Проверить, загружена ли система в режиме UEFI</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/firmware/efi/efivars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UEFI&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;BIOS&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Или проще:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /sys/firmware/efi ] &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UEFI&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Legacy BIOS&quot;</span></span></code></pre></div><hr><h2 id="_3-этап-2-загрузчик-grub" tabindex="-1"><strong>3. Этап 2: Загрузчик (GRUB)</strong> <a class="header-anchor" href="#_3-этап-2-загрузчик-grub" aria-label="Permalink to &quot;**3. Этап 2: Загрузчик (GRUB)**&quot;">​</a></h2><h3 id="теория-1" tabindex="-1"><strong>Теория</strong> <a class="header-anchor" href="#теория-1" aria-label="Permalink to &quot;**Теория**&quot;">​</a></h3><ul><li>Наиболее распространённый загрузчик — <strong>GRUB2</strong> (Grand Unified Bootloader).</li><li>GRUB читает конфигурацию (<code>/boot/grub/grub.cfg</code>) и предлагает выбор ОС/ядра.</li><li>Загружает <strong>ядро Linux</strong> (vmlinuz) и <strong>initramfs</strong> в память.</li><li>Передаёт управление ядру.</li></ul><blockquote><p>⚠️ В <code>grub.cfg</code> можно увидеть параметры ядра: <code>root=</code>, <code>ro</code>, <code>quiet</code>, <code>splash</code>.</p></blockquote><h3 id="практика-1" tabindex="-1"><strong>Практика</strong> <a class="header-anchor" href="#практика-1" aria-label="Permalink to &quot;**Практика**&quot;">​</a></h3><p>Посмотреть конфигурацию GRUB:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Просмотр основного конфига (может быть зашифрован)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/grub/grub.cfg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> menuentry</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Просмотр активного ядра и параметров</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/cmdline</span></span></code></pre></div><p>Пример вывода:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BOOT_IMAGE=/boot/vmlinuz-5.15.0-86-generic root=UUID=1234-5678 ro quiet splash</span></span></code></pre></div><blockquote><p><code>ro</code> — корневая ФС монтируется только для чтения на старте.<br><code>quiet splash</code> — скрытый режим загрузки (без логов).</p></blockquote><hr><h2 id="_4-этап-3-ядро-kernel-и-initramfs" tabindex="-1"><strong>4. Этап 3: Ядро (Kernel) и initramfs</strong> <a class="header-anchor" href="#_4-этап-3-ядро-kernel-и-initramfs" aria-label="Permalink to &quot;**4. Этап 3: Ядро (Kernel) и initramfs**&quot;">​</a></h2><h3 id="теория-2" tabindex="-1"><strong>Теория</strong> <a class="header-anchor" href="#теория-2" aria-label="Permalink to &quot;**Теория**&quot;">​</a></h3><ul><li>Ядро инициализируется: настраивает память, CPU, устройства, драйверы.</li><li>Сначала используется <strong>initramfs</strong> — временная корневая ФС в RAM.</li><li>initramfs содержит мини-окружение (busybox), драйверы, модули, скрипты.</li><li>Цель: подготовить реальную корневую ФС (например, расшифровать LUKS, смонтировать RAID, NFS).</li></ul><blockquote><p>💡 initramfs = <strong>init</strong>ial <strong>ram</strong> <strong>fs</strong> — сжатый архив (обычно <code>initrd.img-*</code>).</p></blockquote><h3 id="практика-2" tabindex="-1"><strong>Практика</strong> <a class="header-anchor" href="#практика-2" aria-label="Permalink to &quot;**Практика**&quot;">​</a></h3><h4 id="_1-посмотреть-текущии-initramfs" tabindex="-1">1. Посмотреть текущий initramfs: <a class="header-anchor" href="#_1-посмотреть-текущии-initramfs" aria-label="Permalink to &quot;1. Посмотреть текущий initramfs:&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Список образов initramfs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/initrd.img-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Распакуем initramfs для анализа (временная папка)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/initramfs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/initramfs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zcat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/initrd.img-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cpio</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -iv</span></span></code></pre></div><blockquote><p>⚠️ Требует прав root. Можно использовать <code>unmkinitramfs</code> (в Ubuntu/Debian).</p></blockquote><h4 id="_2-посмотреть-что-делает-initramfs-при-загрузке" tabindex="-1">2. Посмотреть, что делает initramfs при загрузке: <a class="header-anchor" href="#_2-посмотреть-что-делает-initramfs-при-загрузке" aria-label="Permalink to &quot;2. Посмотреть, что делает initramfs при загрузке:&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Просмотр событий ядра (очень важный инструмент!)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dmesg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> head</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -30</span></span></code></pre></div><p>Пример:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[    0.000000] Linux version 5.15.0-86-generic (...)</span></span>
<span class="line"><span>[    0.000000] Command line: BOOT_IMAGE=/boot/vmlinuz-... ro quiet splash</span></span>
<span class="line"><span>[    0.000000] e820: BIOS-provided physical RAM map:</span></span>
<span class="line"><span>[    0.000000] ACPI: RSDP 0x00000000BFFFC000 000024 (v02 ALASKA)</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>[    1.234567] Trying to unpack rootfs image as initramfs...</span></span></code></pre></div><hr><h2 id="_5-этап-4-dmesg-—-ключевои-инструмент-анализа-загрузки" tabindex="-1"><strong>5. Этап 4: dmesg — ключевой инструмент анализа загрузки</strong> <a class="header-anchor" href="#_5-этап-4-dmesg-—-ключевои-инструмент-анализа-загрузки" aria-label="Permalink to &quot;**5. Этап 4: dmesg — ключевой инструмент анализа загрузки**&quot;">​</a></h2><h3 id="что-такое-dmesg" tabindex="-1"><strong>Что такое dmesg?</strong> <a class="header-anchor" href="#что-такое-dmesg" aria-label="Permalink to &quot;**Что такое dmesg?**&quot;">​</a></h3><ul><li><code>dmesg</code> — утилита для просмотра <strong>буфера ядра (kernel ring buffer)</strong>.</li><li>Содержит логи от момента включения: обнаружение оборудования, ошибки, инициализация драйверов.</li></ul><h3 id="практическое-использование" tabindex="-1"><strong>Практическое использование</strong> <a class="header-anchor" href="#практическое-использование" aria-label="Permalink to &quot;**Практическое использование**&quot;">​</a></h3><h4 id="_1-посмотреть-весь-лог-ядра" tabindex="-1">1. Посмотреть весь лог ядра: <a class="header-anchor" href="#_1-посмотреть-весь-лог-ядра" aria-label="Permalink to &quot;1. Посмотреть весь лог ядра:&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dmesg</span></span></code></pre></div><h4 id="_2-фильтрация-по-времени" tabindex="-1">2. Фильтрация по времени: <a class="header-anchor" href="#_2-фильтрация-по-времени" aria-label="Permalink to &quot;2. Фильтрация по времени:&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Последние 20 строк</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dmesg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -20</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># С таймстампами в удобном формате</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dmesg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span></span></code></pre></div><h4 id="_3-поиск-событии-initramfs" tabindex="-1">3. Поиск событий initramfs: <a class="header-anchor" href="#_3-поиск-событии-initramfs" aria-label="Permalink to &quot;3. Поиск событий initramfs:&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dmesg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;initramfs\\|initrd&quot;</span></span></code></pre></div><p>Пример:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[    1.234567] Trying to unpack rootfs image as initramfs...</span></span>
<span class="line"><span>[    1.250000] Freeing initrd memory: 48484K</span></span></code></pre></div><h4 id="_4-поиск-ошибок" tabindex="-1">4. Поиск ошибок: <a class="header-anchor" href="#_4-поиск-ошибок" aria-label="Permalink to &quot;4. Поиск ошибок:&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dmesg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dmesg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fail</span></span></code></pre></div><h4 id="_5-фильтр-по-подсистеме" tabindex="-1">5. Фильтр по подсистеме: <a class="header-anchor" href="#_5-фильтр-по-подсистеме" aria-label="Permalink to &quot;5. Фильтр по подсистеме:&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dmesg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;usb\\|pci\\|eth0\\|ext4&quot;</span></span></code></pre></div><hr><h2 id="_6-этап-5-пользовательское-пространство-и-systemd" tabindex="-1"><strong>6. Этап 5: Пользовательское пространство и systemd</strong> <a class="header-anchor" href="#_6-этап-5-пользовательское-пространство-и-systemd" aria-label="Permalink to &quot;**6. Этап 5: Пользовательское пространство и systemd**&quot;">​</a></h2><h3 id="теория-3" tabindex="-1"><strong>Теория</strong> <a class="header-anchor" href="#теория-3" aria-label="Permalink to &quot;**Теория**&quot;">​</a></h3><p>После того как ядро смонтировало корневую ФС:</p><ul><li>Запускается первый процесс — <strong>PID 1</strong>.</li><li>В современных системах это <strong>systemd</strong>.</li><li>systemd читает цели (targets): <code>multi-user.target</code>, <code>graphical.target</code>.</li><li>Запускает сервисы: сеть, SSH, GUI, cron и т.д.</li></ul><h3 id="практика-3" tabindex="-1"><strong>Практика</strong> <a class="header-anchor" href="#практика-3" aria-label="Permalink to &quot;**Практика**&quot;">​</a></h3><h4 id="_1-посмотреть-кто-pid-1" tabindex="-1">1. Посмотреть, кто PID 1: <a class="header-anchor" href="#_1-посмотреть-кто-pid-1" aria-label="Permalink to &quot;1. Посмотреть, кто PID 1:&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> head</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; 1 &quot;</span></span></code></pre></div><p>Вывод:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>root         1  0.0  0.2 123456  7890 ?        Ss   10:00   0:01 /sbin/init</span></span></code></pre></div><h4 id="_2-проверить-какая-система-инициализации-используется" tabindex="-1">2. Проверить, какая система инициализации используется: <a class="header-anchor" href="#_2-проверить-какая-система-инициализации-используется" aria-label="Permalink to &quot;2. Проверить, какая система инициализации используется:&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -la</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sbin/init</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sbin/init</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # часто ссылка на /lib/systemd/systemd</span></span></code></pre></div><h4 id="_3-посмотреть-время-загрузки" tabindex="-1">3. Посмотреть время загрузки: <a class="header-anchor" href="#_3-посмотреть-время-загрузки" aria-label="Permalink to &quot;3. Посмотреть время загрузки:&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemd-analyze</span></span></code></pre></div><p>Пример:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Startup finished in 3.234s (kernel) + 4.567s (userspace) = 7.801s</span></span></code></pre></div><h4 id="_4-разбор-времени-по-сервисам" tabindex="-1">4. Разбор времени по сервисам: <a class="header-anchor" href="#_4-разбор-времени-по-сервисам" aria-label="Permalink to &quot;4. Разбор времени по сервисам:&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemd-analyze</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> blame</span></span></code></pre></div><p>Вывод:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  2.345s NetworkManager-wait-online.service</span></span>
<span class="line"><span>  1.234s snapd.service</span></span>
<span class="line"><span>  0.876s apparmor.service</span></span></code></pre></div><h4 id="_5-графическое-представление" tabindex="-1">5. Графическое представление: <a class="header-anchor" href="#_5-графическое-представление" aria-label="Permalink to &quot;5. Графическое представление:&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemd-analyze</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boot.svg</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Открыть в браузере или просмотрщике</span></span></code></pre></div><hr><h2 id="_7-практическая-работа-диагностика-медленнои-загрузки" tabindex="-1"><strong>7. Практическая работа: диагностика медленной загрузки</strong> <a class="header-anchor" href="#_7-практическая-работа-диагностика-медленнои-загрузки" aria-label="Permalink to &quot;**7. Практическая работа: диагностика медленной загрузки**&quot;">​</a></h2><h3 id="задача-система-загружается-15-секунд-наити-узкое-место" tabindex="-1"><strong>Задача</strong>: система загружается 15 секунд. Найти узкое место. <a class="header-anchor" href="#задача-система-загружается-15-секунд-наити-узкое-место" aria-label="Permalink to &quot;**Задача**: система загружается 15 секунд. Найти узкое место.&quot;">​</a></h3><h3 id="шаги" tabindex="-1"><strong>Шаги</strong>: <a class="header-anchor" href="#шаги" aria-label="Permalink to &quot;**Шаги**:&quot;">​</a></h3><ol><li><p>Проверим общее время:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemd-analyze</span></span></code></pre></div></li><li><p>Найдём самые долгие сервисы:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemd-analyze</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> blame</span></span></code></pre></div></li><li><p>Если видим <code>NetworkManager-wait-online.service</code> — это ожидание сети. Решение: отключить ожидание или настроить таймаут:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> disable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NetworkManager-wait-online.service</span></span></code></pre></div></li><li><p>Проверим наличие ошибок в dmesg:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dmesg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;error\\|fail&quot;</span></span></code></pre></div></li><li><p>Проверим, не блокирует ли initramfs (например, запрос пароля LUKS):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dmesg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;crypt\\|luks&quot;</span></span></code></pre></div></li></ol><hr><h2 id="_8-дополнительные-инструменты" tabindex="-1"><strong>8. Дополнительные инструменты</strong> <a class="header-anchor" href="#_8-дополнительные-инструменты" aria-label="Permalink to &quot;**8. Дополнительные инструменты**&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Инструмент</th><th>Назначение</th></tr></thead><tbody><tr><td><code>journalctl -b</code></td><td>Логи текущей загрузки (юзерспейс)</td></tr><tr><td><code>journalctl -k</code></td><td>Только логи ядра (аналог dmesg)</td></tr><tr><td><code>systemctl list-units --type=service --state=failed</code></td><td>Упавшие сервисы</td></tr><tr><td><code>lsinitramfs /boot/initrd.img-$(uname -r)</code></td><td>Просмотр содержимого initramfs (Debian/Ubuntu)</td></tr></tbody></table><p>Пример:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Логи с момента загрузки</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">journalctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Последние 20 строк лога ядра</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">journalctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -k</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span></code></pre></div><hr><h2 id="_9-самостоятельная-работа-задания" tabindex="-1"><strong>9. Самостоятельная работа / задания</strong> <a class="header-anchor" href="#_9-самостоятельная-работа-задания" aria-label="Permalink to &quot;**9. Самостоятельная работа / задания**&quot;">​</a></h2><ol><li><p><strong>Задание 1</strong>:<br> Определите, в каком режиме загружена система (UEFI/BIOS). Подтвердите двумя способами.</p></li><li><p><strong>Задание 2</strong>:<br> Выведите параметры командной строки ядра. Найдите, где указан <code>root=</code>.</p></li><li><p><strong>Задание 3</strong>:<br> Найдите в <code>dmesg</code> момент, когда ядро обнаруживает ваш жёсткий диск. Какой у него devname?</p></li><li><p><strong>Задание 4</strong>:<br> Используя <code>systemd-analyze blame</code>, найдите три самых долгих сервиса. Предложите, как ускорить загрузку.</p></li><li><p><strong>Задание 5 (продвинутое)</strong>:<br> Распакуйте initramfs и найдите скрипт <code>init</code>. Какие действия он выполняет до монтирования корня?</p></li></ol><hr><h2 id="заключение" tabindex="-1"><strong>Заключение</strong> <a class="header-anchor" href="#заключение" aria-label="Permalink to &quot;**Заключение**&quot;">​</a></h2><p>Понимание этапов загрузки Linux — основа для диагностики, оптимизации и восстановления системы. Ключевые инструменты:</p><ul><li><code>dmesg</code> — для анализа ядра и оборудования.</li><li><code>systemd-analyze</code> — для оценки времени загрузки.</li><li><code>journalctl</code> — для логов пользовательского пространства.</li><li>Работа с <code>initramfs</code> — для глубокой отладки проблем с корневой ФС.</li></ul><p>💡 <strong>Совет</strong>: Всегда смотрите <code>dmesg</code> при проблемах с загрузкой — 80% ответов там.</p><hr><h2 id="дополнительные-материалы" tabindex="-1"><strong>Дополнительные материалы</strong> <a class="header-anchor" href="#дополнительные-материалы" aria-label="Permalink to &quot;**Дополнительные материалы**&quot;">​</a></h2><ul><li><code>man dmesg</code>, <code>man systemd-analyze</code>, <code>man journalctl</code></li><li>Документация kernel.org: <a href="https://www.kernel.org/doc/html/latest/" target="_blank" rel="noreferrer">https://www.kernel.org/doc/html/latest/</a></li><li>Статья: &quot;How Linux Boots&quot; от Julia Evans (в картинках)</li></ul><hr><p>Если у вас есть доступ к реальной или виртуальной машине — попробуйте выполнить все команды из лекции. Практика — лучший способ запомнить!</p><h1 id="подробныи-разбор-процесса-загрузки-linux-этапы-графики-и-практическая-диагностика" tabindex="-1"><strong>Подробный разбор процесса загрузки Linux: этапы, графики и практическая диагностика</strong> <a class="header-anchor" href="#подробныи-разбор-процесса-загрузки-linux-этапы-графики-и-практическая-диагностика" aria-label="Permalink to &quot;**Подробный разбор процесса загрузки Linux: этапы, графики и практическая диагностика**&quot;">​</a></h1><hr><h2 id="введение-1" tabindex="-1"><strong>Введение</strong> <a class="header-anchor" href="#введение-1" aria-label="Permalink to &quot;**Введение**&quot;">​</a></h2><p>Процесс загрузки Linux — это сложная последовательность этапов, где каждый компонент взаимодействует с предыдущим и следующим. Для глубокого понимания важно не только знать теорию, но и <strong>видеть процесс визуально</strong>. В этой лекции мы:</p><ul><li>Разберём загрузку <strong>пошагово с ASCII-графиками и схемами</strong>.</li><li>Научимся <strong>генерировать реальные графики загрузки</strong>.</li><li>Проведём диагностику с помощью <code>dmesg</code>, <code>systemd-analyze</code>, и других инструментов.</li></ul><hr><h2 id="_1-общая-схема-загрузки-визуальное-представление" tabindex="-1"><strong>1. Общая схема загрузки: визуальное представление</strong> <a class="header-anchor" href="#_1-общая-схема-загрузки-визуальное-представление" aria-label="Permalink to &quot;**1. Общая схема загрузки: визуальное представление**&quot;">​</a></h2><h3 id="ascii-арт-полная-последовательность" tabindex="-1"><strong>ASCII-арт: полная последовательность</strong> <a class="header-anchor" href="#ascii-арт-полная-последовательность" aria-label="Permalink to &quot;**ASCII-арт: полная последовательность**&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────┐     ┌─────────────┐     ┌───────────────────┐     ┌───────────────────┐     ┌───────────────────┐</span></span>
<span class="line"><span>│             │     │             │     │                   │     │                   │     │                   │</span></span>
<span class="line"><span>│   BIOS/     │     │   Boot-     │     │   Kernel +        │     │   systemd +       │     │   User Space      │</span></span>
<span class="line"><span>│   UEFI      │────▶│   loader    │────▶│   initramfs       │────▶│   init system     │────▶│   (GUI, services) │</span></span>
<span class="line"><span>│             │     │   (GRUB)    │     │                   │     │                   │     │                   │</span></span>
<span class="line"><span>└─────────────┘     └─────────────┘     └───────────────────┘     └───────────────────┘     └───────────────────┘</span></span>
<span class="line"><span>      │                   │                   │  ▲  │                   │  ▲  │                   │</span></span>
<span class="line"><span>      │                   │                   │  │  │                   │  │  │                   │</span></span>
<span class="line"><span>      ▼                   ▼                   ▼  │  ▼                   ▼  │  ▼                   ▼</span></span>
<span class="line"><span>  POST (Power-On   Загрузка ядра     Инициализация      Смена корневой   Запуск сервисов   Пользовательский</span></span>
<span class="line"><span>  Self Test)       и initramfs      оборудования и      ФС (pivot_root)  (network, sshd)   интерфейс</span></span>
<span class="line"><span>                                      драйверов</span></span></code></pre></div><h3 id="ключевые-особенности" tabindex="-1"><strong>Ключевые особенности:</strong> <a class="header-anchor" href="#ключевые-особенности" aria-label="Permalink to &quot;**Ключевые особенности:**&quot;">​</a></h3><ul><li><strong>Стрелки</strong> показывают передачу управления.</li><li><strong>Вертикальные линии</strong> обозначают критические точки (например, <code>pivot_root</code>).</li><li><strong>Цвета в реальных графиках</strong> (см. раздел 5) помогают выделить этапы.</li></ul><hr><h2 id="_2-этап-1-bios-uefi-—-инициализация-оборудования" tabindex="-1"><strong>2. Этап 1: BIOS/UEFI — инициализация оборудования</strong> <a class="header-anchor" href="#_2-этап-1-bios-uefi-—-инициализация-оборудования" aria-label="Permalink to &quot;**2. Этап 1: BIOS/UEFI — инициализация оборудования**&quot;">​</a></h2><h3 id="теория-с-деталями" tabindex="-1"><strong>Теория с деталями</strong> <a class="header-anchor" href="#теория-с-деталями" aria-label="Permalink to &quot;**Теория с деталями**&quot;">​</a></h3><ol><li><strong>POST (Power-On Self Test)</strong>: <ul><li>Проверка RAM, CPU, периферии.</li><li>Если ошибка — звуковые сигналы или коды на экране.</li></ul></li><li><strong>Поиск загрузочного устройства</strong>: <ul><li>BIOS: проверяет MBR (первые 512 байт диска).</li><li>UEFI: ищет EFI-загрузчик в разделе FAT32 (обычно <code>/boot/efi/EFI/</code>).</li></ul></li><li><strong>Передача управления загрузчику</strong>.</li></ol><h3 id="ascii-схема-uefi-vs-bios" tabindex="-1"><strong>ASCII-схема UEFI vs BIOS</strong> <a class="header-anchor" href="#ascii-схема-uefi-vs-bios" aria-label="Permalink to &quot;**ASCII-схема UEFI vs BIOS**&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌───────────────────────────────┐</span></span>
<span class="line"><span>│           UEFI                │</span></span>
<span class="line"><span>├───────────────────────────────┤</span></span>
<span class="line"><span>│ 1. Запуск UEFI-среды          │</span></span>
<span class="line"><span>│ 2. Проверка Secure Boot       │</span></span>
<span class="line"><span>│ 3. Загрузка EFI-приложения   │</span></span>
<span class="line"><span>│    (например, grubx64.efi)    │</span></span>
<span class="line"><span>└───────────────────────────────┘</span></span>
<span class="line"><span></span></span>
<span class="line"><span>┌───────────────────────────────┐</span></span>
<span class="line"><span>│            BIOS               │</span></span>
<span class="line"><span>├───────────────────────────────┤</span></span>
<span class="line"><span>│ 1. Проверка MBR               │</span></span>
<span class="line"><span>│ 2. Выполнение кода загрузчика │</span></span>
<span class="line"><span>│    (первые 446 байт MBR)      │</span></span>
<span class="line"><span>└───────────────────────────────┘</span></span></code></pre></div><h3 id="практика-проверка-режима-загрузки" tabindex="-1"><strong>Практика: проверка режима загрузки</strong> <a class="header-anchor" href="#практика-проверка-режима-загрузки" aria-label="Permalink to &quot;**Практика: проверка режима загрузки**&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Генерация отчёта о загрузке (пример вывода)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dmidecode</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bios</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UEFI&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        BIOS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Revision:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5.17</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Firmware</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Revision:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.70</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        UEFI</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> supported</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Визуализация через systemd-boot (если используется)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bootctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span></code></pre></div><p><strong>Пример вывода</strong>:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>EFI variables:</span></span>
<span class="line"><span>  LoaderInfo: systemd-boot 252.9-1</span></span>
<span class="line"><span>  LoaderConfig: /boot/loader/loader.conf</span></span>
<span class="line"><span>  LoaderEntries: 3 entries</span></span>
<span class="line"><span>  BootOrder: 0000,0001,0002</span></span>
<span class="line"><span>  BootNext: 0000</span></span>
<span class="line"><span>  BootCurrent: 0000</span></span></code></pre></div><hr><h2 id="_3-этап-2-загрузчик-grub-—-выбор-ядра" tabindex="-1"><strong>3. Этап 2: Загрузчик (GRUB) — выбор ядра</strong> <a class="header-anchor" href="#_3-этап-2-загрузчик-grub-—-выбор-ядра" aria-label="Permalink to &quot;**3. Этап 2: Загрузчик (GRUB) — выбор ядра**&quot;">​</a></h2><h3 id="как-работает-grub" tabindex="-1"><strong>Как работает GRUB?</strong> <a class="header-anchor" href="#как-работает-grub" aria-label="Permalink to &quot;**Как работает GRUB?**&quot;">​</a></h3><ol><li><strong>Stage 1</strong>: Код из MBR (446 байт) загружает Stage 1.5.</li><li><strong>Stage 1.5</strong>: Драйверы для доступа к <code>/boot</code> (например, <code>ext2.mod</code>).</li><li><strong>Stage 2</strong>: Полноценный загрузчик с меню выбора ОС.</li></ol><h3 id="ascii-график-загрузки-grub" tabindex="-1"><strong>ASCII-график загрузки GRUB</strong> <a class="header-anchor" href="#ascii-график-загрузки-grub" aria-label="Permalink to &quot;**ASCII-график загрузки GRUB**&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>MBR (Stage 1)</span></span>
<span class="line"><span>      │</span></span>
<span class="line"><span>      ▼</span></span>
<span class="line"><span>/boot/grub/i386-pc/boot.img (Stage 1.5)</span></span>
<span class="line"><span>      │</span></span>
<span class="line"><span>      ▼</span></span>
<span class="line"><span>/boot/grub/grub.cfg (Stage 2)</span></span>
<span class="line"><span>      │</span></span>
<span class="line"><span>      ▼</span></span>
<span class="line"><span>Загрузка ядра (vmlinuz) и initramfs</span></span></code></pre></div><h3 id="практика-анализ-конфигурации-grub" tabindex="-1"><strong>Практика: анализ конфигурации GRUB</strong> <a class="header-anchor" href="#практика-анализ-конфигурации-grub" aria-label="Permalink to &quot;**Практика: анализ конфигурации GRUB**&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Просмотр активных параметров ядра</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/cmdline</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BOOT_IMAGE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/boot/vmlinuz-6.2.0-39-generic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UUID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1234-5678</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ro</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> quiet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> splash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Генерация графика зависимостей модулей GRUB (пример)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> grub-editenv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> modules</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kernel_cmdline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UUID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1234-5678</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ro</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> quiet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> splash</span></span></code></pre></div><p><strong>Как это выглядит визуально?</strong><br> Если представить зависимости модулей GRUB как граф:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>core.img</span></span>
<span class="line"><span>├── ext2.mod (для /boot)</span></span>
<span class="line"><span>├── part_gpt.mod (GPT-диски)</span></span>
<span class="line"><span>├── normal.mod (меню)</span></span>
<span class="line"><span>└── linux.mod (загрузка ядра)</span></span></code></pre></div><hr><h2 id="_4-этап-3-ядро-и-initramfs-—-сердце-загрузки" tabindex="-1"><strong>4. Этап 3: Ядро и initramfs — &quot;сердце&quot; загрузки</strong> <a class="header-anchor" href="#_4-этап-3-ядро-и-initramfs-—-сердце-загрузки" aria-label="Permalink to &quot;**4. Этап 3: Ядро и initramfs — &quot;сердце&quot; загрузки**&quot;">​</a></h2><h3 id="последовательность-деиствии-ядра" tabindex="-1"><strong>Последовательность действий ядра</strong> <a class="header-anchor" href="#последовательность-деиствии-ядра" aria-label="Permalink to &quot;**Последовательность действий ядра**&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌───────────────────────────────────────┐</span></span>
<span class="line"><span>│ 1. Распаковка ядра (vmlinuz)          │</span></span>
<span class="line"><span>├───────────────────────────────────────┤</span></span>
<span class="line"><span>│ 2. Инициализация памяти (buddy, slab) │</span></span>
<span class="line"><span>├───────────────────────────────────────┤</span></span>
<span class="line"><span>│ 3. Загрузка initramfs                 │</span></span>
<span class="line"><span>├───────────────────────────────────────┤</span></span>
<span class="line"><span>│ 4. Запуск /init из initramfs          │</span></span>
<span class="line"><span>├───────────────────────────────────────┤</span></span>
<span class="line"><span>│ 5. Подготовка реальной корневой ФС    │</span></span>
<span class="line"><span>└───────────────────────────────────────┘</span></span></code></pre></div><h3 id="что-происходит-в-initramfs" tabindex="-1"><strong>Что происходит в initramfs?</strong> <a class="header-anchor" href="#что-происходит-в-initramfs" aria-label="Permalink to &quot;**Что происходит в initramfs?**&quot;">​</a></h3><ol><li><strong>Обнаружение дисков</strong> (через <code>udev</code>).</li><li><strong>Активация LVM/RAID/LUKS</strong> (если требуется).</li><li><strong>Поиск корневой ФС</strong> по <code>root=</code> из <code>/proc/cmdline</code>.</li><li><strong>Смена корня</strong> (<code>pivot_root</code>).</li></ol><h3 id="ascii-график-initramfs" tabindex="-1"><strong>ASCII-график initramfs</strong> <a class="header-anchor" href="#ascii-график-initramfs" aria-label="Permalink to &quot;**ASCII-график initramfs**&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>initramfs</span></span>
<span class="line"><span>      │</span></span>
<span class="line"><span>      ├── Обнаружение дисков (blkid)</span></span>
<span class="line"><span>      │</span></span>
<span class="line"><span>      ├── Расшифровка LUKS (если root=UUID=... зашифрован)</span></span>
<span class="line"><span>      │</span></span>
<span class="line"><span>      ├── Монтирование /dev/mapper/root_crypt</span></span>
<span class="line"><span>      │</span></span>
<span class="line"><span>      └── pivot_root → переход на реальную корневую ФС</span></span></code></pre></div><h3 id="практика-анализ-initramfs-через-dmesg" tabindex="-1"><strong>Практика: анализ initramfs через dmesg</strong> <a class="header-anchor" href="#практика-анализ-initramfs-через-dmesg" aria-label="Permalink to &quot;**Практика: анализ initramfs через dmesg**&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Фильтрация событий initramfs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dmesg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;initramfs\\|crypt\\|pivot&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    1.234] Trying to unpack rootfs image as initramfs...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    1.345] Freeing initrd memory: 48484K</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    2.100] device-mapper: uevent: version 1.03.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    2.200] Loading /lib/modules/6.2.0-39-generic/kernel/drivers/md/raid456.ko</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    3.500] Run /scripts/local-top</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    3.600] cryptsetup: luksOpen /dev/sda2 cryptroot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    4.100] pivot_root: new_root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/sysroot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> put_old</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/sysroot/old</span></span></code></pre></div><p><strong>Как это интерпретировать?</strong></p><ul><li><code>1.234s</code>: Распаковка initramfs.</li><li><code>2.200s</code>: Загрузка модуля RAID.</li><li><code>3.600s</code>: Расшифровка LUKS (требует ввода пароля).</li><li><code>4.100s</code>: Успешный <code>pivot_root</code>.</li></ul><hr><h2 id="_5-этап-4-systemd-—-управление-сервисами" tabindex="-1"><strong>5. Этап 4: systemd — управление сервисами</strong> <a class="header-anchor" href="#_5-этап-4-systemd-—-управление-сервисами" aria-label="Permalink to &quot;**5. Этап 4: systemd — управление сервисами**&quot;">​</a></h2><h3 id="временная-диаграмма-загрузки-systemd-analyze-plot" tabindex="-1"><strong>Временная диаграмма загрузки (systemd-analyze plot)</strong> <a class="header-anchor" href="#временная-диаграмма-загрузки-systemd-analyze-plot" aria-label="Permalink to &quot;**Временная диаграмма загрузки (systemd-analyze plot)**&quot;">​</a></h3><h4 id="как-это-выглядит-на-реальном-графике" tabindex="-1"><strong>Как это выглядит на реальном графике?</strong> <a class="header-anchor" href="#как-это-выглядит-на-реальном-графике" aria-label="Permalink to &quot;**Как это выглядит на реальном графике?**&quot;">​</a></h4><p><img src="https://i.imgur.com/8ZkzFQl.png" alt="Пример systemd-analyze plot"><br><em>(Условное изображение. В реальности генерируется SVG)</em></p><h4 id="расшифровка-графика" tabindex="-1"><strong>Расшифровка графика:</strong> <a class="header-anchor" href="#расшифровка-графика" aria-label="Permalink to &quot;**Расшифровка графика:**&quot;">​</a></h4><ul><li><strong>Ось X</strong>: Время (секунды).</li><li><strong>Цвета</strong>: <ul><li>Синий: Ядро (kernel).</li><li>Зелёный: Пользовательское пространство (userspace).</li><li>Красный: Блокирующие сервисы (например, <code>NetworkManager-wait-online</code>).</li></ul></li><li><strong>Стрелки</strong>: Зависимости между сервисами.</li></ul><h4 id="как-создать-такои-график" tabindex="-1"><strong>Как создать такой график?</strong> <a class="header-anchor" href="#как-создать-такои-график" aria-label="Permalink to &quot;**Как создать такой график?**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Генерация SVG-файла</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemd-analyze</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boot.svg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Для анализа в браузере</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xdg-open</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boot.svg</span></span></code></pre></div><h4 id="пример-вывода-systemd-analyze-blame" tabindex="-1"><strong>Пример вывода systemd-analyze blame</strong> <a class="header-anchor" href="#пример-вывода-systemd-analyze-blame" aria-label="Permalink to &quot;**Пример вывода systemd-analyze blame**&quot;">​</a></h4><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>          3.2s NetworkManager-wait-online.service</span></span>
<span class="line"><span>          1.8s plymouth-quit-wait.service</span></span>
<span class="line"><span>          1.2s snapd.service</span></span>
<span class="line"><span>          0.9s udisks2.service</span></span></code></pre></div><hr><h2 id="_6-инструменты-для-визуализации-от-теории-к-практике" tabindex="-1"><strong>6. Инструменты для визуализации: от теории к практике</strong> <a class="header-anchor" href="#_6-инструменты-для-визуализации-от-теории-к-практике" aria-label="Permalink to &quot;**6. Инструменты для визуализации: от теории к практике**&quot;">​</a></h2><h3 id="_1-systemd-analyze-—-ваш-лучшии-друг" tabindex="-1"><strong>1. systemd-analyze — ваш лучший друг</strong> <a class="header-anchor" href="#_1-systemd-analyze-—-ваш-лучшии-друг" aria-label="Permalink to &quot;**1. systemd-analyze — ваш лучший друг**&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Общее время загрузки</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemd-analyze</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Startup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> finished</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2.1s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (kernel) + 5.3s (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">userspace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 7.4s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># График зависимостей сервисов</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemd-analyze</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> critical-chain</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">graphical.target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @5.300s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└─multi-user.target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @5.300s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  └─getty.target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @5.300s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └─getty@tty1.service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @5.300s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      └─system-getty.slice</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @5.300s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        └─system.slice</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @1.200s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          └─-.slice</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @1.200s</span></span></code></pre></div><h3 id="_2-bootchart-—-графическии-анализ-устаревшии-но-полезныи" tabindex="-1"><strong>2. bootchart — графический анализ (устаревший, но полезный)</strong> <a class="header-anchor" href="#_2-bootchart-—-графическии-анализ-устаревшии-но-полезныи" aria-label="Permalink to &quot;**2. bootchart — графический анализ (устаревший, но полезный)**&quot;">​</a></h3><p>Установка:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Ubuntu/Debian</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linux-tools-common</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bootchart</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Добавление параметра в GRUB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/default/grub</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GRUB_CMDLINE_LINUX_DEFAULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;... init=/sbin/bootchartd&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Обновление GRUB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-grub</span></span></code></pre></div><p>После перезагрузки график сохранится в <code>/var/log/bootchart/</code>.</p><h3 id="_3-dmesg-с-цветовои-подсветкои" tabindex="-1"><strong>3. dmesg с цветовой подсветкой</strong> <a class="header-anchor" href="#_3-dmesg-с-цветовои-подсветкои" aria-label="Permalink to &quot;**3. dmesg с цветовой подсветкой**&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Цветной вывод с фильтрацией</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dmesg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --color=always</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;error\\|fail&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --color=always</span></span></code></pre></div><p>Пример вывода:<br><img src="https://i.imgur.com/5G7X9yP.png" alt="Цветной dmesg"></p><hr><h2 id="_7-практическая-диагностика-кеис-система-не-загружается" tabindex="-1"><strong>7. Практическая диагностика: кейс &quot;система не загружается&quot;</strong> <a class="header-anchor" href="#_7-практическая-диагностика-кеис-система-не-загружается" aria-label="Permalink to &quot;**7. Практическая диагностика: кейс &quot;система не загружается&quot;**&quot;">​</a></h2><h3 id="сценарии" tabindex="-1"><strong>Сценарий</strong> <a class="header-anchor" href="#сценарии" aria-label="Permalink to &quot;**Сценарий**&quot;">​</a></h3><p>Система зависает после <code>Loading initial ramdisk</code>.</p><h3 id="шаги-диагностики" tabindex="-1"><strong>Шаги диагностики</strong> <a class="header-anchor" href="#шаги-диагностики" aria-label="Permalink to &quot;**Шаги диагностики**&quot;">​</a></h3><h4 id="_1-анализ-dmesg" tabindex="-1">1. Анализ dmesg <a class="header-anchor" href="#_1-анализ-dmesg" aria-label="Permalink to &quot;1. Анализ dmesg&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Сохраняем логи (если система не загружается — через live-USB)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dmesg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dmesg.log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Ищем ключевые ошибки</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fail\\|error&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dmesg.log</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    3.500] device-mapper: ioctl: error adding target to table</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    3.600] cryptsetup: ERROR: Device /dev/sda2 is not a valid LUKS volume</span></span></code></pre></div><h4 id="_2-визуальныи-анализ-через-systemd-analyze-если-частично-загружается" tabindex="-1">2. Визуальный анализ через systemd-analyze (если частично загружается) <a class="header-anchor" href="#_2-визуальныи-анализ-через-systemd-analyze-если-частично-загружается" aria-label="Permalink to &quot;2. Визуальный анализ через systemd-analyze (если частично загружается)&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Проверяем, до какого этапа дошла система</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemd-analyze</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> time</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Kernel:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2.1s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Initrd:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3.5s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Userspace:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.0s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (не </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">дошли</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> до</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="_3-решение-проблемы" tabindex="-1">3. Решение проблемы <a class="header-anchor" href="#_3-решение-проблемы" aria-label="Permalink to &quot;3. Решение проблемы&quot;">​</a></h4><p>Ошибка: <strong>LUKS-том повреждён</strong>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Попытка восстановить заголовок LUKS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cryptsetup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> luksHeaderBackup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/sda2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --header-backup-file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> luks.header.bak</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Пересоздание initramfs с правильными модулями</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-initramfs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -k</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span></span></code></pre></div><hr><h2 id="_8-продвинутые-техники-как-видеть-каждыи-этап" tabindex="-1"><strong>8. Продвинутые техники: как &quot;видеть&quot; каждый этап</strong> <a class="header-anchor" href="#_8-продвинутые-техники-как-видеть-каждыи-этап" aria-label="Permalink to &quot;**8. Продвинутые техники: как &quot;видеть&quot; каждый этап**&quot;">​</a></h2><h3 id="_1-добавление-verbose-в-grub" tabindex="-1"><strong>1. Добавление verbose в GRUB</strong> <a class="header-anchor" href="#_1-добавление-verbose-в-grub" aria-label="Permalink to &quot;**1. Добавление verbose в GRUB**&quot;">​</a></h3><p>Чтобы видеть все логи ядра:</p><ol><li>Откройте <code>/etc/default/grub</code>.</li><li>Уберите <code>quiet splash</code> из <code>GRUB_CMDLINE_LINUX_DEFAULT</code>.</li><li>Обновите GRUB: <code>sudo update-grub</code>.</li></ol><p><strong>Результат</strong>:<br> Вместо чёрного экрана вы увидите поток логов ядра (аналог <code>dmesg -w</code>).</p><h3 id="_2-трассировка-загрузки-через-ftrace" tabindex="-1"><strong>2. Трассировка загрузки через ftrace</strong> <a class="header-anchor" href="#_2-трассировка-загрузки-через-ftrace" aria-label="Permalink to &quot;**2. Трассировка загрузки через ftrace**&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Включение трассировки в GRUB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GRUB_CMDLINE_LINUX_DEFAULT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;... trace_event=timer:start,enable&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Анализ после загрузки</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/trace</span></span></code></pre></div><h3 id="_3-график-потребления-ресурсов-bootchart" tabindex="-1"><strong>3. График потребления ресурсов (bootchart)</strong> <a class="header-anchor" href="#_3-график-потребления-ресурсов-bootchart" aria-label="Permalink to &quot;**3. График потребления ресурсов (bootchart)**&quot;">​</a></h3><p><img src="https://i.imgur.com/mXJ9R0d.png" alt="Пример bootchart"></p><ul><li><strong>Зелёная зона</strong>: CPU-активность.</li><li><strong>Синяя зона</strong>: Дисковые операции.</li><li><strong>Красная линия</strong>: Потребление памяти.</li></ul><hr><h2 id="_9-самостоятельная-работа-создаите-свои-график-загрузки" tabindex="-1"><strong>9. Самостоятельная работа: создайте свой график загрузки</strong> <a class="header-anchor" href="#_9-самостоятельная-работа-создаите-свои-график-загрузки" aria-label="Permalink to &quot;**9. Самостоятельная работа: создайте свой график загрузки**&quot;">​</a></h2><h3 id="задание-1-сгенерируите-svg-через-systemd-analyze" tabindex="-1"><strong>Задание 1: сгенерируйте SVG через systemd-analyze</strong> <a class="header-anchor" href="#задание-1-сгенерируите-svg-через-systemd-analyze" aria-label="Permalink to &quot;**Задание 1: сгенерируйте SVG через systemd-analyze**&quot;">​</a></h3><ol><li>Выполните: <code>systemd-analyze plot &gt; my_boot.svg</code>.</li><li>Откройте файл в браузере.</li><li>Найдите: <ul><li>Самый долгий сервис.</li><li>Момент перехода от ядра к userspace.</li></ul></li></ol><h3 id="задание-2-проанализируите-initramfs" tabindex="-1"><strong>Задание 2: проанализируйте initramfs</strong> <a class="header-anchor" href="#задание-2-проанализируите-initramfs" aria-label="Permalink to &quot;**Задание 2: проанализируйте initramfs**&quot;">​</a></h3><ol><li>Распакуйте initramfs:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/initramfs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/initramfs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zcat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/initrd.img-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cpio</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -idv</span></span></code></pre></div></li><li>Найдите файл <code>/init</code>.</li><li>Откройте его в редакторе и найдите: <ul><li>Где происходит <code>pivot_root</code>.</li><li>Какие модули загружаются первыми.</li></ul></li></ol><h3 id="задание-3-имитация-ошибки-загрузки" tabindex="-1"><strong>Задание 3: имитация ошибки загрузки</strong> <a class="header-anchor" href="#задание-3-имитация-ошибки-загрузки" aria-label="Permalink to &quot;**Задание 3: имитация ошибки загрузки**&quot;">​</a></h3><ol><li>Добавьте в GRUB параметр <code>rd.break</code> (остановка на этапе initramfs).</li><li>Перезагрузитесь.</li><li>В консоли initramfs выполните:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Проверьте, смонтирована ли корневая ФС</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/mapper</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # Посмотрите доступные LUKS-тома</span></span></code></pre></div></li></ol><hr><h2 id="заключение-1" tabindex="-1"><strong>Заключение</strong> <a class="header-anchor" href="#заключение-1" aria-label="Permalink to &quot;**Заключение**&quot;">​</a></h2><p>Понимание загрузки Linux — это <strong>навык, который строится на трёх китах</strong>:</p><ol><li><strong>Теория</strong>: знание этапов и их взаимодействия.</li><li><strong>Практика</strong>: умение читать <code>dmesg</code>, <code>journalctl</code>, генерировать графики.</li><li><strong>Визуализация</strong>: интерпретация данных через <code>systemd-analyze plot</code>, bootchart.</li></ol><p>💡 <strong>Главный совет</strong>:</p><blockquote><p>&quot;Если система не загружается — сначала посмотрите <code>dmesg | tail -50</code>. 90% проблем там.&quot;</p></blockquote><hr><h2 id="полезные-ресурсы-с-графиками" tabindex="-1"><strong>Полезные ресурсы с графиками</strong> <a class="header-anchor" href="#полезные-ресурсы-с-графиками" aria-label="Permalink to &quot;**Полезные ресурсы с графиками**&quot;">​</a></h2><ol><li><a href="https://www.freedesktop.org/software/systemd/man/systemd-analyze.html" target="_blank" rel="noreferrer">systemd-analyze plot — официальная документация</a></li><li><a href="http://www.bootchart.org/" target="_blank" rel="noreferrer">Bootchart — генератор графиков загрузки</a></li><li><a href="https://linuxjourney.com/lesson/boot-process" target="_blank" rel="noreferrer">Linux Boot Process — интерактивная анимация</a></li></ol><hr><p><strong>Проверьте себя</strong>:</p><ul><li>Можете ли вы нарисовать схему загрузки Linux за 2 минуты?</li><li>Как объяснить коллеге, почему <code>NetworkManager-wait-online</code> замедляет загрузку?</li><li>Какой командой проверить, что initramfs содержит драйвер для вашего RAID-массива?</li></ul><p>Если ответы есть — вы готовы к диагностике любой проблемы с загрузкой! 🐧</p><h3 id="практическая-работа-процесс-загрузки-linux" tabindex="-1">Практическая работа: <strong>Процесс загрузки Linux</strong> <a class="header-anchor" href="#практическая-работа-процесс-загрузки-linux" aria-label="Permalink to &quot;Практическая работа: **Процесс загрузки Linux**&quot;">​</a></h3><p><strong>Цель работы:</strong><br> Изучить этапы загрузки Linux, познакомиться с ключевыми компонентами (BIOS/UEFI, загрузчик GRUB, ядро, initramfs, systemd), научиться анализировать и настраивать параметры загрузки.</p><hr><h3 id="блок-теории" tabindex="-1">Блок теории <a class="header-anchor" href="#блок-теории" aria-label="Permalink to &quot;Блок теории&quot;">​</a></h3><p><strong>Краткий обзор процесса загрузки Linux:</strong></p><ol><li><p><strong>BIOS/UEFI</strong></p><ul><li>Инициализация оборудования, проверка POST (Power-On Self-Test).</li><li>Поиск загрузочного устройства (MBR/GPT).</li><li>Передача управления загрузчику (например, GRUB).</li></ul></li><li><p><strong>Загрузчик (GRUB 2)</strong></p><ul><li>Отображает меню выбора ОС.</li><li>Загружает ядро (<code>vmlinuz</code>) и образ initramfs в память.</li><li>Передает параметры ядра (например, <code>quiet splash</code>).</li></ul></li><li><p><strong>Ядро Linux</strong></p><ul><li>Инициализирует подсистемы (память, процессы, драйверы).</li><li>Монтирует <strong>initramfs</strong> — временную файловую систему для подготовки реальной корневой ФС.</li></ul></li><li><p><strong>Initramfs</strong></p><ul><li>Содержит минимальные инструменты и драйверы для доступа к корневой ФС (например, LVM, шифрование).</li><li>Подготавливает оборудование, монтирует корневую ФС.</li></ul></li><li><p><strong>Системный менеджер (systemd)</strong></p><ul><li>Запускает процессы в пользовательском пространстве (сервисы, демоны).</li><li>Управляет зависимостями через <strong>юниты</strong> (<code>.service</code>, <code>.target</code>).</li><li>Передает управление сеансу пользователя (login, графическая оболочка).</li></ul></li></ol><hr><h3 id="оборудование-и-по" tabindex="-1">Оборудование и ПО <a class="header-anchor" href="#оборудование-и-по" aria-label="Permalink to &quot;Оборудование и ПО&quot;">​</a></h3><ul><li><strong>ОС:</strong> Ubuntu 22.04 LTS (или любой дистрибутив с GRUB 2 и systemd).</li><li><strong>Требования:</strong><ul><li>Доступ к терминалу с правами <code>sudo</code>.</li><li>Виртуальная машина (рекомендуется для безопасности).</li></ul></li></ul><hr><h3 id="практические-задания" tabindex="-1">Практические задания <a class="header-anchor" href="#практические-задания" aria-label="Permalink to &quot;Практические задания&quot;">​</a></h3><p><strong>Внимание!</strong> Все команды выполняются в терминале. Преподаватель демонстрирует шаги, студенты повторяют.</p><hr><h4 id="задание-1-анализ-конфигурации-grub" tabindex="-1"><strong>Задание 1. Анализ конфигурации GRUB</strong> <a class="header-anchor" href="#задание-1-анализ-конфигурации-grub" aria-label="Permalink to &quot;**Задание 1. Анализ конфигурации GRUB**&quot;">​</a></h4><ol><li><p>Откройте терминал и посмотрите основной конфигурационный файл GRUB:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/default/grub</span></span></code></pre></div><p><strong>Что ищем:</strong></p><ul><li><code>GRUB_TIMEOUT</code> — время отображения меню загрузки.</li><li><code>GRUB_CMDLINE_LINUX</code> — параметры ядра (например, <code>quiet splash</code>).</li></ul></li><li><p>Посмотрите сгенерированный файл загрузочного меню:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/grub/grub.cfg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;menuentry &#39;Ubuntu&#39;&quot;</span></span></code></pre></div><p><strong>Обратите внимание:</strong></p><ul><li>Строки <code>linux</code> и <code>initrd</code> — пути к ядру и initramfs.</li><li>Параметры ядра (например, <code>ro quiet splash</code>).</li></ul></li></ol><hr><h4 id="задание-2-временное-изменение-параметров-загрузки" tabindex="-1"><strong>Задание 2. Временное изменение параметров загрузки</strong> <a class="header-anchor" href="#задание-2-временное-изменение-параметров-загрузки" aria-label="Permalink to &quot;**Задание 2. Временное изменение параметров загрузки**&quot;">​</a></h4><ol><li>Перезагрузите систему:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reboot</span></span></code></pre></div></li><li>Во время старта, когда появится меню GRUB: <ul><li>Нажмите <strong>Esc</strong> (для UEFI) или <strong>Shift</strong> (для BIOS), чтобы открыть меню.</li><li>Выберите строку с ядром и нажмите <strong>e</strong> для редактирования.</li></ul></li><li>Найдите строку, начинающуюся с <code>linux</code>, и добавьте в конец параметр:<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>systemd.unit=rescue.target</span></span></code></pre></div>(Это загрузит систему в режим восстановления без графического интерфейса.)</li><li>Нажмите <strong>Ctrl+X</strong> для загрузки с новыми параметрами.</li><li>После входа в систему проверьте текущий <strong>target</strong>:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get-default</span></span></code></pre></div><strong>Ожидаемый результат:</strong> <code>rescue.target</code>.</li></ol><hr><h4 id="задание-3-анализ-логов-загрузки" tabindex="-1"><strong>Задание 3. Анализ логов загрузки</strong> <a class="header-anchor" href="#задание-3-анализ-логов-загрузки" aria-label="Permalink to &quot;**Задание 3. Анализ логов загрузки**&quot;">​</a></h4><ol><li><p>Вернитесь в обычный режим (перезагрузите систему).</p></li><li><p>Просмотрите логи ядра:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dmesg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;boot&quot;</span></span></code></pre></div><p><strong>Что ищем:</strong></p><ul><li>Сообщения об инициализации оборудования (например, <code>ACPI</code>, <code>CPU</code>).</li></ul></li><li><p>Проверьте время загрузки:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemd-analyze</span></span></code></pre></div><p><strong>Пример вывода:</strong></p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Startup finished in 8.235s (firmware) + 2.123s (loader) + 4.567s (kernel) + 10.123s (userspace) = 25.048s</span></span></code></pre></div></li><li><p>Узнайте, какие юниты systemd замедляют загрузку:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemd-analyze</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> blame</span></span></code></pre></div></li></ol><hr><h4 id="задание-4-настроика-времени-отображения-меню-grub" tabindex="-1"><strong>Задание 4. Настройка времени отображения меню GRUB</strong> <a class="header-anchor" href="#задание-4-настроика-времени-отображения-меню-grub" aria-label="Permalink to &quot;**Задание 4. Настройка времени отображения меню GRUB**&quot;">​</a></h4><ol><li>Откройте конфигурационный файл GRUB:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/default/grub</span></span></code></pre></div></li><li>Измените параметр:<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GRUB_TIMEOUT=10</span></span></code></pre></div>(Теперь меню будет отображаться 10 секунд вместо стандартных 5.)</li><li>Примените изменения:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update-grub</span></span></code></pre></div></li><li>Перезагрузите систему и убедитесь, что таймаут изменился.</li></ol><hr><h3 id="вопросы-для-самоконтроля" tabindex="-1">Вопросы для самоконтроля <a class="header-anchor" href="#вопросы-для-самоконтроля" aria-label="Permalink to &quot;Вопросы для самоконтроля&quot;">​</a></h3><ol><li>Какой компонент отвечает за монтирование корневой файловой системы?</li><li>Для чего используется initramfs?</li><li>Как проверить текущий режим работы systemd (multi-user, graphical)?</li><li>Что произойдет, если удалить параметр <code>ro</code> из строки загрузки ядра?</li><li>Как временно отключить графический интерфейс при загрузке?</li></ol><hr><h3 id="отчет-по-работе" tabindex="-1">Отчет по работе <a class="header-anchor" href="#отчет-по-работе" aria-label="Permalink to &quot;Отчет по работе&quot;">​</a></h3><p>Студент должен предоставить:</p><ol><li>Скриншоты вывода команд из <strong>Задания 1</strong> и <strong>Задания 3</strong>.</li><li>Ответы на 3 вопроса из блока самоконтроля.</li><li>Описание изменений, внесенных в GRUB (таймаут, параметры ядра).</li></ol><hr><h3 id="методические-рекомендации" tabindex="-1">Методические рекомендации <a class="header-anchor" href="#методические-рекомендации" aria-label="Permalink to &quot;Методические рекомендации&quot;">​</a></h3><ul><li><strong>Для преподавателя:</strong><ul><li>Перед работой убедитесь, что все студенты используют виртуальные машины (рекомендуется VirtualBox/Vagrant).</li><li>В случае ошибок при настройке GRUB: объясните, как восстановить систему через режим восстановления.</li></ul></li><li><strong>Для студентов:</strong><ul><li>Не изменяйте параметры ядра без понимания их назначения (риск неработоспособности системы).</li><li>Используйте команду <code>man</code> для изучения справки (например, <code>man update-grub</code>).</li></ul></li></ul><hr><p><strong>Важно!</strong> Эта работа помогает понять, как взаимодействуют подсистемы Linux при загрузке, и закрепляет знания, полученные на теоретическом занятии об архитектуре GNU/Linux.</p>`,250)]))}const c=a(e,[["render",l]]);export{g as __pageData,c as default};
