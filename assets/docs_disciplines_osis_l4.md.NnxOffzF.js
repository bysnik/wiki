import{_ as s,c as n,o as l,ag as p}from"./chunks/framework.D4Vqf8I7.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/disciplines/osis/l4.md","filePath":"docs/disciplines/osis/l4.md","lastUpdated":1756739716000}'),i={name:"docs/disciplines/osis/l4.md"};function t(e,a,o,r,h,c){return l(),n("div",null,a[0]||(a[0]=[p(`<p><strong>Тупик</strong> — ситуация, когда процесс ожидает какого-то события, которое никогда не произойдет.</p><hr><h3 id="условия-возникновения-тупиков" tabindex="-1"><strong>Условия возникновения тупиков</strong> <a class="header-anchor" href="#условия-возникновения-тупиков" aria-label="Permalink to &quot;**Условия возникновения тупиков**&quot;">​</a></h3><p>Условия возникновения тупиков были сформулированы Коффманом, Элфиком и Шошани в 1970 г.</p><ol><li><strong>Условие взаимоисключения (Mutual exclusion)</strong>. Одновременно использовать ресурс может только один процесс.</li><li><strong>Условие ожидания ресурсов (Hold and wait)</strong>. Процессы удерживают ресурсы, уже выделенные им, и могут запрашивать другие ресурсы.</li><li><strong>Условие неперераспределяемости (No preemption)</strong>. Ресурс, выделенный ранее, не может быть принудительно забран у процесса. Освобождены они могут быть только процессом, который их удерживает.</li><li><strong>Условие кругового ожидания (Circular wait)</strong>. Существует кольцевая цепь процессов, в которой каждый процесс ждет доступа к ресурсу, удерживаемому другим процессом цепи.</li></ol><p>Обычно тупик моделируется циклом в графе, состоящем из узлов двух видов: прямоугольников — процессов и эллипсов — ресурсов. Стрелки, направленные от ресурса к процессу, показывают, что ресурс выделен данному процессу. Стрелки, направленные от процесса к ресурсу, означают, что процесс запрашивает данный ресурс.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Пример графа:</span></span>
<span class="line"><span>[Процесс P1] --&gt; [Ресурс R1]</span></span>
<span class="line"><span>[Ресурс R1] --&gt; [Процесс P2]</span></span>
<span class="line"><span>[Процесс P2] --&gt; [Ресурс R2]</span></span>
<span class="line"><span>[Ресурс R2] --&gt; [Процесс P1]</span></span></code></pre></div><hr><h3 id="основные-направления-борьбы-с-тупиками" tabindex="-1"><strong>Основные направления борьбы с тупиками</strong> <a class="header-anchor" href="#основные-направления-борьбы-с-тупиками" aria-label="Permalink to &quot;**Основные направления борьбы с тупиками**&quot;">​</a></h3><p>Методы предотвращения взаимоблокировок ориентированы главным образом на нарушение первых трех условий путем введения ряда ограничений на поведение процессов и способы распределения ресурсов. Методы обнаружения и устранения менее консервативны и сводятся к поиску и разрыву цикла ожидания ресурсов.</p><p>Основные направления борьбы с тупиками:</p><ul><li>Игнорирование проблемы в целом</li><li>Предотвращение тупиков</li><li>Обнаружение тупиков</li><li>Восстановление после тупиков</li></ul><hr><h3 id="игнорирование-проблемы-тупиков" tabindex="-1"><strong>Игнорирование проблемы тупиков</strong> <a class="header-anchor" href="#игнорирование-проблемы-тупиков" aria-label="Permalink to &quot;**Игнорирование проблемы тупиков**&quot;">​</a></h3><p>Простейший подход — не замечать проблему тупиков. Для того чтобы принять такое решение, необходимо оценить ущерб производительности системы. Проектировщики обычно не желают жертвовать производительностью системы или удобством пользователей для внедрения сложных и дорогостоящих средств борьбы с тупиками.</p><p>Заполнение всех записей таблицы процессов может привести к тому, что очередной запрос на создание процесса может быть отклонен. При неблагоприятном стечении обстоятельств несколько процессов могут выдать такой запрос одновременно и оказаться в тупике.</p><p>Подход большинства популярных ОС (Unix, Windows и др.) состоит в том, чтобы игнорировать данную проблему в предположении, что маловероятный случайный тупик предпочтительнее, чем правила, заставляющие пользователей ограничивать число процессов и открытых файлов.</p><hr><h3 id="способы-предотвращения-тупиков-путем-тщательного-распределения-ресурсов-алгоритм-банкира" tabindex="-1"><strong>Способы предотвращения тупиков путем тщательного распределения ресурсов. Алгоритм банкира</strong> <a class="header-anchor" href="#способы-предотвращения-тупиков-путем-тщательного-распределения-ресурсов-алгоритм-банкира" aria-label="Permalink to &quot;**Способы предотвращения тупиков путем тщательного распределения ресурсов. Алгоритм банкира**&quot;">​</a></h3><p>Наиболее известен алгоритм банкира, предложенный Дейкстрой, который базируется на так называемых безопасных или надежных состояниях (safe state). <strong>Безопасное состояние</strong> — это такое состояние, для которого имеется по крайней мере одна последовательность событий, которая не приведет к взаимоблокировке.</p><p>Суть алгоритма состоит в следующем:</p><ul><li>Предположим, что у системы в наличии n устройств, например лент.</li><li>ОС принимает запрос от пользовательского процесса, если его максимальная потребность не превышает n.</li><li>Пользователь гарантирует, что если ОС в состоянии удовлетворить его запрос, то все устройства будут возвращены системе в течение конечного времени.</li><li>Текущее состояние системы называется <strong>надежным</strong>, если ОС может обеспечить всем процессам их выполнение в течение конечного времени.</li><li>В соответствии с алгоритмом банкира выделение устройств возможно, только если состояние системы остается надежным.</li></ul><p>Рассмотрим пример надежного состояния для системы с 3 пользователями и 11 устройствами, где 9 устройств задействовано, а 2 имеется в резерве. Пусть текущая ситуация такова:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Пользователь 1: макс. потребность = 6, выделено = 3</span></span>
<span class="line"><span>Пользователь 2: макс. потребность = 5, выделено = 4</span></span>
<span class="line"><span>Пользователь 3: макс. потребность = 4, выделено = 2</span></span></code></pre></div><p>Последующие действия системы могут быть таковы. Вначале удовлетворить запросы третьего пользователя, затем дождаться, когда он закончит работу и освободит свои три устройства. Затем можно обслужить первого и второго пользователей. То есть система удовлетворяет только те запросы, которые оставляют ее в надежном состоянии, и отклоняет остальные.</p><p>Термин «ненадежное состояние» не предполагает, что обязательно возникнут тупики. Он лишь говорит о том, что в случае неблагоприятной последовательности событий система может зайти в тупик.</p><p>Данный алгоритм обладает тем достоинством, что при его использовании нет необходимости в перераспределении ресурсов и откате процессов назад. Однако использование этого метода требует выполнения ряда условий:</p><ul><li>Число пользователей и число ресурсов фиксировано.</li><li>Число работающих пользователей должно оставаться постоянным.</li><li>Алгоритм требует, чтобы клиенты гарантированно возвращали ресурсы.</li><li>Должны быть заранее указаны максимальные требования процессов к ресурсам. Чаще всего данная информация отсутствует.</li></ul><p>Наличие таких жестких и зачастую неприемлемых требований может склонить разработчиков к выбору других решений проблемы взаимоблокировки.</p><hr><h3 id="предотвращение-тупиков-за-счет-нарушения-условии-возникновения-тупиков" tabindex="-1"><strong>Предотвращение тупиков за счет нарушения условий возникновения тупиков</strong> <a class="header-anchor" href="#предотвращение-тупиков-за-счет-нарушения-условии-возникновения-тупиков" aria-label="Permalink to &quot;**Предотвращение тупиков за счет нарушения условий возникновения тупиков**&quot;">​</a></h3><h4 id="нарушение-условия-взаимоисключения" tabindex="-1"><strong>Нарушение условия взаимоисключения</strong> <a class="header-anchor" href="#нарушение-условия-взаимоисключения" aria-label="Permalink to &quot;**Нарушение условия взаимоисключения**&quot;">​</a></h4><p>В качестве примера рассмотрим принтер. Известно, что пытаться осуществлять вывод на принтер могут несколько процессов.</p><p>Во избежание хаоса организуют промежуточное формирование всех выходных данных процесса на диске, то есть разделяемом устройстве. Лишь один системный процесс, называемый сервисом или демоном принтера, отвечающий за вывод документов на печать по мере освобождения принтера, реально с ним взаимодействует. Эта схема называется спулингом (spooling). Таким образом, принтер становится разделяемым устройством, и тупик для него устранен.</p><p>К сожалению, не для всех устройств и не для всех данных можно организовать спулинг. Неприятным побочным следствием такой модели может быть потенциальная тупиковая ситуация из-за конкуренции за дисковое пространство для буфера спулинга.</p><h4 id="нарушение-условия-ожидания-дополнительных-ресурсов" tabindex="-1"><strong>Нарушение условия ожидания дополнительных ресурсов</strong> <a class="header-anchor" href="#нарушение-условия-ожидания-дополнительных-ресурсов" aria-label="Permalink to &quot;**Нарушение условия ожидания дополнительных ресурсов**&quot;">​</a></h4><p>Условия ожидания ресурсов можно избежать, потребовав выполнения стратегии двухфазного захвата:</p><ul><li>В первой фазе процесс должен запрашивать все необходимые ему ресурсы сразу. До тех пор пока они не предоставлены, процесс не может продолжать выполнение.</li><li>Если в первой фазе некоторые ресурсы, которые были нужны данному процессу, уже заняты другими процессами, он освобождает все ресурсы, которые были ему выделены, и пытается повторить первую фазу.</li></ul><p>Таким образом, один из способов — заставить все процессы затребовать нужные им ресурсы перед выполнением («все или ничего»). Если система в состоянии выделить процессу все необходимое, он может работать до завершения. Если хотя бы один из ресурсов занят, процесс будет ждать.</p><p>Данное решение применяется в пакетных мэйнфреймах (mainframe), которые требуют от пользователей перечислить все необходимые его программе ресурсы. Другим примером может служить механизм двухфазной локализации записей в СУБД. Однако в целом подобный подход не слишком привлекателен и приводит к неэффективному использованию компьютера.</p><h4 id="нарушение-принципа-отсутствия-перераспределения" tabindex="-1"><strong>Нарушение принципа отсутствия перераспределения</strong> <a class="header-anchor" href="#нарушение-принципа-отсутствия-перераспределения" aria-label="Permalink to &quot;**Нарушение принципа отсутствия перераспределения**&quot;">​</a></h4><p>Если бы можно было отбирать ресурсы у удерживающих их процессов до завершения этих процессов, то удалось бы добиться невыполнения третьего условия возникновения тупиков. Перечислим минусы данного подхода:</p><ul><li>Отбирать у процессов можно только те ресурсы, состояние которых легко сохранить, а позже восстановить, например состояние процессора.</li><li>Если процесс в течение некоторого времени использует определенные ресурсы, а затем освобождает эти ресурсы, он может потерять результаты работы, проделанной до настоящего момента.</li></ul><p>Следствием данной схемы может быть дискриминация отдельных процессов, у которых постоянно отбирают ресурсы. Также это может быть дорогостоящим.</p><h4 id="нарушение-условия-кругового-ожидания" tabindex="-1"><strong>Нарушение условия кругового ожидания</strong> <a class="header-anchor" href="#нарушение-условия-кругового-ожидания" aria-label="Permalink to &quot;**Нарушение условия кругового ожидания**&quot;">​</a></h4><p>Один из способов — <strong>упорядочить ресурсы</strong>. Например, можно присвоить всем ресурсам уникальные номера и потребовать, чтобы процессы запрашивали ресурсы в порядке их возрастания. Тогда круговое ожидание возникнуть не может.</p><p>Один из немногих примеров упорядочивания ресурсов — создание иерархии спин-блокировок в Windows 2000. <strong>Спин-блокировка</strong> — простейший способ синхронизации. Спин-блокировка может быть захвачена и освобождена процессом. Классическая тупиковая ситуация возникает, когда процесс P1 захватывает спин-блокировку S1 и претендует на спин-блокировку S2, а процесс P2 захватывает спин-блокировку S2 и хочет дополнительно захватить спин-блокировку S1. Чтобы этого избежать, все спин-блокировки помещаются в упорядоченный список. Захват может осуществляться только в порядке, указанном в списке.</p><p>Другой способ — действовать в соответствии с правилом, согласно которому каждый процесс может иметь только один ресурс в каждый момент времени. Если нужен второй ресурс — освободи первый. Очевидно, что для многих процессов это неприемлемо.</p><p>Таким образом, технология предотвращения циклического ожидания, как правило, неэффективна и может без необходимости закрывать доступ к ресурсам.</p><hr><h3 id="обнаружение-тупиков" tabindex="-1"><strong>Обнаружение тупиков</strong> <a class="header-anchor" href="#обнаружение-тупиков" aria-label="Permalink to &quot;**Обнаружение тупиков**&quot;">​</a></h3><p>Для обнаружения и выявления вовлеченных процессов производится проверка наличия циклического ожидания в случаях, когда выполнены первые три условия возникновения тупика.</p><p>Рассмотрим модельную ситуацию:</p><ul><li>Процесс P1 ожидает ресурс R1.</li><li>Процесс P2 удерживает ресурс R2 и ожидает ресурс R1.</li><li>Процесс P3 удерживает ресурс R1 и ожидает ресурс R3.</li><li>Процесс P4 ожидает ресурс R2.</li><li>Процесс P5 удерживает ресурс R3 и ожидает ресурс R2.</li></ul><p>Для выяснения, является ли данная ситуация тупиковой, можно сконструировать граф ресурсов. Из рисунка видно, что имеется цикл, моделирующий условие кругового ожидания, и что процессы P2, P3, P5, а может быть, и другие находятся в тупиковой ситуации.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Граф:</span></span>
<span class="line"><span>P1 -&gt; R1</span></span>
<span class="line"><span>R2 -&gt; P2</span></span>
<span class="line"><span>P2 -&gt; R1</span></span>
<span class="line"><span>R1 -&gt; P3</span></span>
<span class="line"><span>P3 -&gt; R3</span></span>
<span class="line"><span>R3 -&gt; P5</span></span>
<span class="line"><span>P5 -&gt; R2</span></span>
<span class="line"><span>P4 -&gt; R2</span></span></code></pre></div><p>Визуально легко обнаружить наличие тупика, но нужны также формальные алгоритмы, реализуемые на компьютере.</p><hr><h3 id="восстановление-после-тупиков" tabindex="-1"><strong>Восстановление после тупиков</strong> <a class="header-anchor" href="#восстановление-после-тупиков" aria-label="Permalink to &quot;**Восстановление после тупиков**&quot;">​</a></h3><p>Обнаружив тупик, можно вывести из него систему, нарушив одно из условий существования тупика. При этом, возможно, несколько процессов частично или полностью потеряют результаты проделанной работы.</p><p>Сложность восстановления обусловлена рядом факторов:</p><ul><li>В большинстве систем нет достаточно эффективных средств, чтобы приостановить процесс, вывести его из системы и возобновить впоследствии с того места, где он был остановлен.</li><li>Если даже такие средства есть, то их использование требует затрат и внимания оператора.</li></ul><p>Самый простой и наиболее распространенный способ устранить тупик — завершить выполнение одного или более процессов, чтобы впоследствии использовать его ресурсы. Тогда в случае удачи остальные процессы смогут выполняться. Если это не помогает, можно ликвидировать еще несколько процессов.</p><p>После каждой ликвидации должен запускаться алгоритм обнаружения тупика.</p><p><strong>Идемпотентные процессы</strong> — процессы, которые могут быть возвращены к началу без ущерба (например, компиляция).</p><p>С другой стороны, процесс, который изменяет содержимое базы данных, не всегда может быть корректно запущен повторно.</p><p>В некоторых случаях можно временно забрать ресурс у текущего владельца и передать его другому процессу. Подобное восстановление часто затруднительно, если не невозможно.</p><p>В некоторых системах возможен откат по контрольным точкам.</p><p>Когда тупик обнаружен, видно, какие ресурсы вовлечены в цикл кругового ожидания. Чтобы осуществить восстановление, процесс, который владеет таким ресурсом, должен быть отброшен к моменту времени, предшествующему его запросу на этот ресурс.</p>`,69)]))}const u=s(i,[["render",t]]);export{g as __pageData,u as default};
