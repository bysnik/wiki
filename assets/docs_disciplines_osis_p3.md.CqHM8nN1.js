import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.D4Vqf8I7.js";const g=JSON.parse('{"title":"Практическая работа №3","description":"","frontmatter":{},"headers":[],"relativePath":"docs/disciplines/osis/p3.md","filePath":"docs/disciplines/osis/p3.md","lastUpdated":1757922727000}'),l={name:"docs/disciplines/osis/p3.md"};function h(p,s,e,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="практическая-работа-no3" tabindex="-1"><strong>Практическая работа №3</strong> <a class="header-anchor" href="#практическая-работа-no3" aria-label="Permalink to &quot;**Практическая работа №3**&quot;">​</a></h1><h2 id="тема-исследование-структуры-памяти-процесса-и-виртуальнои-памяти-в-linux" tabindex="-1"><strong>Тема: Исследование структуры памяти процесса и виртуальной памяти в Linux</strong> <a class="header-anchor" href="#тема-исследование-структуры-памяти-процесса-и-виртуальнои-памяти-в-linux" aria-label="Permalink to &quot;**Тема: Исследование структуры памяти процесса и виртуальной памяти в Linux**&quot;">​</a></h2><p><strong>Цель работы:</strong><br> Научиться анализировать структуру виртуального адресного пространства процесса, изучить основные компоненты памяти процесса, понять принципы отображения виртуальной памяти на физическую, а также познакомиться с инструментами анализа потребления памяти в Linux.</p><p><strong>Оборудование и программное обеспечение:</strong></p><ul><li>Компьютер с ОС Linux (рекомендуется Ubuntu/Debian/Fedora)</li><li>Терминал</li><li>Утилиты: <code>pmap</code>, <code>cat /proc/&lt;PID&gt;/maps</code>, <code>vmstat</code>, <code>free</code>, <code>ps</code>, <code>top</code>, <code>lscpu</code></li><li>Язык программирования C (для компиляции простого тестового приложения)</li></ul><hr><h2 id="часть-1-подготовка-—-анализ-физическои-и-виртуальнои-памяти-системы" tabindex="-1"><strong>Часть 1: Подготовка — анализ физической и виртуальной памяти системы</strong> <a class="header-anchor" href="#часть-1-подготовка-—-анализ-физическои-и-виртуальнои-памяти-системы" aria-label="Permalink to &quot;**Часть 1: Подготовка — анализ физической и виртуальной памяти системы**&quot;">​</a></h2><h3 id="шаг-1-1-изучение-параметров-памяти-системы" tabindex="-1"><strong>Шаг 1.1: Изучение параметров памяти системы</strong> <a class="header-anchor" href="#шаг-1-1-изучение-параметров-памяти-системы" aria-label="Permalink to &quot;**Шаг 1.1: Изучение параметров памяти системы**&quot;">​</a></h3><p>Преподаватель демонстрирует, студенты повторяют.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Просмотр информации о процессоре (размер страницы)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lscpu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Page size&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Просмотр объёма оперативной памяти</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">free</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Просмотр использования памяти в реальном времени</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vmstat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> memory</span></span></code></pre></div><p><strong>Вопрос для обсуждения:</strong></p><blockquote><p>Какой стандартный размер страницы памяти в x86_64 системах? (Ответ: 4 КБ)</p></blockquote><hr><h2 id="часть-2-запуск-и-анализ-процесса" tabindex="-1"><strong>Часть 2: Запуск и анализ процесса</strong> <a class="header-anchor" href="#часть-2-запуск-и-анализ-процесса" aria-label="Permalink to &quot;**Часть 2: Запуск и анализ процесса**&quot;">​</a></h2><h3 id="шаг-2-1-создание-простого-c-приложения" tabindex="-1"><strong>Шаг 2.1: Создание простого C-приложения</strong> <a class="header-anchor" href="#шаг-2-1-создание-простого-c-приложения" aria-label="Permalink to &quot;**Шаг 2.1: Создание простого C-приложения**&quot;">​</a></h3><p>Создайте файл <code>mem_example.c</code>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdlib.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;unistd.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global_var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Данные в секции .data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> local_var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // Стек</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static_var </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Секция .data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">heap_mem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Куча</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PID процесса: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getpid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Адрес global_var: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global_var);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Адрес local_var: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">local_var);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Адрес static_var: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">static_var);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Адрес в куче: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, heap_mem);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Ожидание... (не закрывайте)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Задержка, чтобы посмотреть память</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Компиляция:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mem_example.c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mem_example</span></span></code></pre></div><p><strong>Запуск:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./mem_example</span></span></code></pre></div><blockquote><p>Запомните PID процесса (выводится в консоль).</p></blockquote><hr><h3 id="шаг-2-2-анализ-виртуального-адресного-пространства-процесса" tabindex="-1"><strong>Шаг 2.2: Анализ виртуального адресного пространства процесса</strong> <a class="header-anchor" href="#шаг-2-2-анализ-виртуального-адресного-пространства-процесса" aria-label="Permalink to &quot;**Шаг 2.2: Анализ виртуального адресного пространства процесса**&quot;">​</a></h3><h4 id="использование-proc-pid-maps" tabindex="-1"><strong>Использование <code>/proc/&lt;PID&gt;/maps</code></strong> <a class="header-anchor" href="#использование-proc-pid-maps" aria-label="Permalink to &quot;**Использование \`/proc/&lt;PID&gt;/maps\`**&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Замените &lt;PID&gt; на реальный PID процесса</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/maps</span></span></code></pre></div><p><strong>Разбор вывода (преподаватель объясняет):</strong></p><ul><li>Адресные диапазоны: стек, куча, код, данные, библиотеки</li><li>Флаги: <code>r</code> — чтение, <code>w</code> — запись, <code>x</code> — выполнение, <code>p</code> — частная, <code>s</code> — разделяемая</li><li>Пример:<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>555555559000-55555555a000 r--p 00000000 08:01 123456 /home/user/mem_example</span></span></code></pre></div></li></ul><p><strong>Задание студентам:</strong><br> Найти в выводе:</p><ul><li>Сегмент кода (<code>.text</code>)</li><li>Сегмент данных (<code>.data</code>)</li><li>Кучу (heap)</li><li>Стек (stack)</li><li>Отображённые библиотеки (например, <code>libc</code>)</li></ul><hr><h3 id="шаг-2-3-использование-утилиты-pmap" tabindex="-1"><strong>Шаг 2.3: Использование утилиты <code>pmap</code></strong> <a class="header-anchor" href="#шаг-2-3-использование-утилиты-pmap" aria-label="Permalink to &quot;**Шаг 2.3: Использование утилиты \`pmap\`**&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pmap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p><strong>Объяснение:</strong><br> Утилита показывает детализированное распределение памяти процесса: размер, типы отображений, anon (анонимная память), файлы.</p><p><strong>Задание:</strong><br> Определите:</p><ul><li>Общий объём памяти процесса</li><li>Размер анонимной памяти (куча, стек)</li><li>Какие shared-объекты загружены?</li></ul><hr><h2 id="часть-3-исследование-виртуальнои-памяти-и-подкачки" tabindex="-1"><strong>Часть 3: Исследование виртуальной памяти и подкачки</strong> <a class="header-anchor" href="#часть-3-исследование-виртуальнои-памяти-и-подкачки" aria-label="Permalink to &quot;**Часть 3: Исследование виртуальной памяти и подкачки**&quot;">​</a></h2><h3 id="шаг-3-1-мониторинг-использования-памяти-системои" tabindex="-1"><strong>Шаг 3.1: Мониторинг использования памяти системой</strong> <a class="header-anchor" href="#шаг-3-1-мониторинг-использования-памяти-системои" aria-label="Permalink to &quot;**Шаг 3.1: Мониторинг использования памяти системой**&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Текущее состояние памяти</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">free</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Статистика по страницам памяти и подкачке</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vmstat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre></div><p><strong>Объяснение полей:</strong></p><ul><li><code>si</code> — свопинг (подкачка) в память (KB/s)</li><li><code>so</code> — выгрузка в своп (KB/s)</li><li>Если <code>si</code> и <code>so</code> &gt; 0 — активная подкачка</li></ul><p><strong>Задание:</strong><br> Запустите процесс, потребляющий много памяти (например, скрипт на Python, выделяющий массив), и понаблюдайте за <code>vmstat</code>.</p><hr><h3 id="шаг-3-2-анализ-потребления-памяти-процессами" tabindex="-1"><strong>Шаг 3.2: Анализ потребления памяти процессами</strong> <a class="header-anchor" href="#шаг-3-2-анализ-потребления-памяти-процессами" aria-label="Permalink to &quot;**Шаг 3.2: Анализ потребления памяти процессами**&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Топ процессов по потреблению памяти</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">top</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %MEM</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Или через ps</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aux</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sort=-%mem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> head</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -10</span></span></code></pre></div><p><strong>Вопрос:</strong></p><blockquote><p>Почему виртуальная память (VSZ) может быть намного больше физической (RSS)?</p></blockquote><p><strong>Ответ:</strong></p><blockquote><p>VSZ — это виртуальное адресное пространство, включая неиспользуемые страницы, отображённые файлы, своп. RSS — реально загруженные в RAM страницы.</p></blockquote><hr><h2 id="часть-4-отображение-фаилов-в-память-mmap" tabindex="-1"><strong>Часть 4: Отображение файлов в память (mmap)</strong> <a class="header-anchor" href="#часть-4-отображение-фаилов-в-память-mmap" aria-label="Permalink to &quot;**Часть 4: Отображение файлов в память (mmap)**&quot;">​</a></h2><h3 id="шаг-4-1-демонстрация-mmap-через-proc-maps" tabindex="-1"><strong>Шаг 4.1: Демонстрация mmap через /proc/maps</strong> <a class="header-anchor" href="#шаг-4-1-демонстрация-mmap-через-proc-maps" aria-label="Permalink to &quot;**Шаг 4.1: Демонстрация mmap через /proc/maps**&quot;">​</a></h3><p>Создайте файл:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, mmap!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testfile.txt</span></span></code></pre></div><p>Запустите программу, которая использует <code>mmap</code>, или просто откройте файл в редакторе (например, <code>vim testfile.txt</code>). Затем проверьте <code>/proc/&lt;PID&gt;/maps</code> — вы увидите отображение файла в память.</p><p><strong>Пример строки в maps:</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>7f8a1c000000-7f8a1c001000 r--p 00000000 08:01 123456 /home/user/testfile.txt</span></span></code></pre></div><p><strong>Объяснение:</strong><br> Файл отображён в виртуальную память процесса. Чтение/запись идёт через страницы памяти, а не через системные вызовы <code>read/write</code>.</p><hr><h2 id="часть-5-заключение-и-вопросы" tabindex="-1"><strong>Часть 5: Заключение и вопросы</strong> <a class="header-anchor" href="#часть-5-заключение-и-вопросы" aria-label="Permalink to &quot;**Часть 5: Заключение и вопросы**&quot;">​</a></h2><h3 id="контрольные-вопросы-для-самопроверки" tabindex="-1"><strong>Контрольные вопросы (для самопроверки):</strong> <a class="header-anchor" href="#контрольные-вопросы-для-самопроверки" aria-label="Permalink to &quot;**Контрольные вопросы (для самопроверки):**&quot;">​</a></h3><ol><li>Что такое виртуальная память и зачем она нужна?</li><li>Как организована таблица страниц в x86_64?</li><li>Чем отличается RSS от VSZ?</li><li>Как работает отображение файлов в память (mmap)?</li><li>Для чего используется TLB (Translation Lookaside Buffer)?</li><li>Почему размер страницы обычно 4 КБ? Какие есть альтернативы (huge pages)?</li></ol><hr><h2 id="отчет-по-работе-для-студентов" tabindex="-1"><strong>Отчёт по работе (для студентов)</strong> <a class="header-anchor" href="#отчет-по-работе-для-студентов" aria-label="Permalink to &quot;**Отчёт по работе (для студентов)**&quot;">​</a></h2><p>Студенты должны подготовить краткий отчёт (1–2 страницы), включающий:</p><ol><li>PID исследуемого процесса.</li><li>Скриншот или текст вывода <code>cat /proc/&lt;PID&gt;/maps</code>.</li><li>Выделение и описание основных секций памяти (стек, куча, код, данные).</li><li>Объём RSS и VSZ процесса (из <code>ps</code> или <code>top</code>).</li><li>Ответы на 2 контрольных вопроса по выбору.</li></ol><hr><h2 id="методические-рекомендации-преподавателю" tabindex="-1"><strong>Методические рекомендации преподавателю</strong> <a class="header-anchor" href="#методические-рекомендации-преподавателю" aria-label="Permalink to &quot;**Методические рекомендации преподавателю**&quot;">​</a></h2><ul><li>Убедитесь, что все студенты могут запустить C-программу и получить PID.</li><li>Контролируйте, чтобы студенты не закрывали процесс до завершения анализа.</li><li>Поощряйте самостоятельный поиск: «Найдите в maps libc» или «Где находится стек?»</li><li>Для продвинутых: можно показать <code>/proc/&lt;PID&gt;/smaps</code> — более детальную статистику по каждой области памяти.</li></ul><hr><p><strong>Итог:</strong><br> Практическая работа позволяет закрепить теорию виртуальной памяти через реальные инструменты Linux, формируя у студентов понимание того, как ядро организует память процессов, использует страничное отображение и управляет ресурсами.</p>`,72)]))}const c=i(l,[["render",h]]);export{g as __pageData,c as default};
