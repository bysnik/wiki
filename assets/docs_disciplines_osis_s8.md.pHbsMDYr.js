import{_ as a,c as i,o as t,ag as e}from"./chunks/framework.D4Vqf8I7.js";const k=JSON.parse('{"title":"Лабораторная работа: Применение ftrace для анализа работы ядра Linux","description":"","frontmatter":{},"headers":[],"relativePath":"docs/disciplines/osis/s8.md","filePath":"docs/disciplines/osis/s8.md","lastUpdated":1756990296000}'),n={name:"docs/disciplines/osis/s8.md"};function l(p,s,h,r,o,d){return t(),i("div",null,s[0]||(s[0]=[e(`<p><a href="https://habr.com/ru/companies/badoo/articles/493856/" target="_blank" rel="noreferrer">https://habr.com/ru/companies/badoo/articles/493856/</a></p><p><a href="https://habr.com/ru/companies/first/articles/442738/" target="_blank" rel="noreferrer">https://habr.com/ru/companies/first/articles/442738/</a></p><p><a href="https://syscalls.mebeim.net/?table=x86/64/x64/v6.12" target="_blank" rel="noreferrer">https://syscalls.mebeim.net/?table=x86/64/x64/v6.12</a></p><p>Дескриптор файла (File Descriptor, FD) — это целое число, которое операционная система использует для представления открытых файлов или других объектов ввода/вывода (например, сокетов, канала связи и т. д.). Он служит уникальным идентификатором, с помощью которого процесс взаимодействует с файлом или устройством.</p><p>Количество доступных для процесса файловых дескрипторов ограничено значением параметра /OPEN_MAX, который задается в файле sys/limits.h. Также можно настроить максимальное количество дескрипторов с помощью флага -n в команде ulimit. Дескрипторы файлов создаются при вызовах таких функций, как open, pipe, creat и fcntl. Каждый процесс обычно использует свой собственный набор дескрипторов, но эти дескрипторы могут быть унаследованы и дочерними процессами, порожденными через функцию fork. Кроме того, дескрипторы можно копировать с использованием функций fcntl, dup и dup2. Как работает дескриптор файла</p><p>Когда процесс открывает файл или устройство (например, с помощью системного вызова open() в Linux), операционная система создает дескриптор файла для отслеживания открытого ресурса. Этот дескриптор служит ссылкой, через которую процесс может читать, записывать или управлять этим ресурсом.</p><ul><li>Открытие файла: Когда процесс вызывает функцию открытия файла (например, open()), операционная система возвращает дескриптор, который будет использоваться в дальнейшем для взаимодействия с файлом.</li><li>Чтение/запись: После того как процесс получает дескриптор файла, он может использовать его для выполнения операций ввода/вывода, таких как чтение с помощью read() или запись с помощью write().</li><li>Закрытие файла: Когда процесс больше не нуждается в файле, он вызывает функцию close() для освобождения дескриптора, и операционная система может закрыть файл.</li></ul><p>Пример работы с дескриптором файла (на примере C): #include #include int main() { int fd = open(&quot;example.txt&quot;, O_RDONLY); // Открываем файл для чтения if (fd == -1) { // Ошибка при открытии файла return 1; } char buffer[100]; ssize_t bytesRead = read(fd, buffer, sizeof(buffer)); // Чтение из файла if (bytesRead == -1) { // Ошибка при чтении close(fd); return 1; } write(STDOUT_FILENO, buffer, bytesRead); // Печать содержимого файла в стандартный вывод close(fd); // Закрытие дескриптора return 0; } Kопировать</p><p>В этом примере: open(“example.txt”, O_RDONLY) открывает файл для чтения и возвращает дескриптор fd.read(fd, buffer, sizeof(buffer)) использует дескриптор для чтения данных из файла.write(STDOUT_FILENO, buffer, bytesRead) выводит считанные данные на экран.close(fd) закрывает файл и освобождает дескриптор. Важные типы дескрипторов</p><p>Стандартные дескрипторы: Это заранее определенные дескрипторы, которые автоматически открыты для каждого процесса:0 — стандартный ввод (stdin).1 — стандартный вывод (stdout).2 — стандартный вывод ошибок (stderr). Роль дескрипторов в операционных системах</p><p>Открытие файлов и устройств: Дескриптор файла — это способ для операционной системы отслеживать открытые файлы и другие ресурсы ввода/вывода. Он позволяет системе управлять правами доступа и выполнять операции ввода/вывода.</p><p>Ресурсы ввода/вывода: Помимо файлов, дескрипторы используются для работы с другими объектами ввода/вывода, такими как сокеты, каналы, устройства, и другие файлы, не обязательно физические (например, временные файлы, потоки).</p><p>Пример в Linux</p><p>В Linux, каждый процесс имеет таблицу дескрипторов файлов, где индекс каждого элемента — это сам дескриптор, а значение элемента — это структура данных, которая хранит информацию о соответствующем открытом ресурсе. Например, когда процесс открывает файл, операционная система присваивает дескриптор, чтобы отслеживать его состояние, и передает этот дескриптор обратно процессу для дальнейшей работы. Дескриптор файла — это основной механизм взаимодействия процессов с файлами и устройствами ввода/вывода в операционных системах, позволяющий системам эффективно управлять ресурсами.</p><h1 id="лабораторная-работа-применение-ftrace-для-анализа-работы-ядра-linux" tabindex="-1">Лабораторная работа: Применение ftrace для анализа работы ядра Linux <a class="header-anchor" href="#лабораторная-работа-применение-ftrace-для-анализа-работы-ядра-linux" aria-label="Permalink to &quot;Лабораторная работа: Применение ftrace для анализа работы ядра Linux&quot;">​</a></h1><hr><h2 id="цель-работы" tabindex="-1">Цель работы <a class="header-anchor" href="#цель-работы" aria-label="Permalink to &quot;Цель работы&quot;">​</a></h2><p>Изучить принципы работы с инструментом <strong>ftrace</strong> для трассировки вызовов функций ядра Linux, освоить базовые методы настройки и анализа данных, полученных с помощью ftrace.</p><hr><h2 id="оборудование-и-программное-обеспечение" tabindex="-1">Оборудование и программное обеспечение <a class="header-anchor" href="#оборудование-и-программное-обеспечение" aria-label="Permalink to &quot;Оборудование и программное обеспечение&quot;">​</a></h2><ul><li>Операционная система: Linux (ядро ≥ 3.10, рекомендуется Ubuntu/Debian)</li><li>Права: root (для доступа к debugfs)</li><li>Утилиты: bash, grep, less</li><li>Дополнительно: монтирование debugfs (если не выполнено автоматически)</li></ul><hr><h2 id="теоретическая-часть" tabindex="-1">Теоретическая часть <a class="header-anchor" href="#теоретическая-часть" aria-label="Permalink to &quot;Теоретическая часть&quot;">​</a></h2><h3 id="что-такое-ftrace" tabindex="-1">Что такое ftrace? <a class="header-anchor" href="#что-такое-ftrace" aria-label="Permalink to &quot;Что такое ftrace?&quot;">​</a></h3><p><strong>ftrace</strong> — встроенный в ядро Linux инструмент для трассировки выполнения функций ядра. Он позволяет:</p><ul><li>Отслеживать последовательность вызовов функций.</li><li>Анализировать время выполнения функций.</li><li>Изучать взаимодействие компонентов ядра.</li><li>Диагностировать проблемы производительности.</li></ul><h3 id="основные-возможности" tabindex="-1">Основные возможности <a class="header-anchor" href="#основные-возможности" aria-label="Permalink to &quot;Основные возможности&quot;">​</a></h3><ul><li><strong>Function tracer</strong>: запись всех вызовов функций.</li><li><strong>Function graph tracer</strong>: отображение вызовов в виде дерева с указанием времени выполнения.</li><li><strong>Event tracing</strong>: трассировка конкретных событий ядра (например, переключений задач).</li><li><strong>Stack tracer</strong>: анализ использования стека ядра.</li></ul><h3 id="расположение-интерфеиса" tabindex="-1">Расположение интерфейса <a class="header-anchor" href="#расположение-интерфеиса" aria-label="Permalink to &quot;Расположение интерфейса&quot;">​</a></h3><p>Интерфейс ftrace доступен через <strong>debugfs</strong> в каталоге:<br><code>/sys/kernel/debug/tracing/</code></p><h4 id="ключевые-фаилы" tabindex="-1">Ключевые файлы: <a class="header-anchor" href="#ключевые-фаилы" aria-label="Permalink to &quot;Ключевые файлы:&quot;">​</a></h4><ul><li><code>current_tracer</code> — выбор активного трейсера.</li><li><code>available_tracers</code> — список доступных трейсеров.</li><li><code>trace</code> — вывод результатов трассировки.</li><li><code>set_ftrace_filter</code> — фильтрация функций для трассировки.</li><li><code>tracing_on</code> — включение/отключение записи трассировки.</li></ul><hr><h2 id="ход-работы" tabindex="-1">Ход работы <a class="header-anchor" href="#ход-работы" aria-label="Permalink to &quot;Ход работы&quot;">​</a></h2><h3 id="подготовка-окружения" tabindex="-1">Подготовка окружения <a class="header-anchor" href="#подготовка-окружения" aria-label="Permalink to &quot;Подготовка окружения&quot;">​</a></h3><ol><li><p><strong>Проверка доступности debugfs</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing</span></span></code></pre></div><p>Если каталог отсутствует, смонтируйте debugfs:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mount</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debugfs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug</span></span></code></pre></div></li><li><p><strong>Проверка поддержки ftrace в ядре</strong>: Убедитесь, что в конфигурации ядра включены опции:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CONFIG_FUNCTION_TRACER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/config-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Должно вернуть: CONFIG_FUNCTION_TRACER=y</span></span></code></pre></div></li></ol><hr><h3 id="задание-1-базовая-трассировка-функции" tabindex="-1">Задание 1: Базовая трассировка функций <a class="header-anchor" href="#задание-1-базовая-трассировка-функции" aria-label="Permalink to &quot;Задание 1: Базовая трассировка функций&quot;">​</a></h3><ol><li><p><strong>Выбор трейсера</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/current_tracer</span></span></code></pre></div></li><li><p><strong>Очистка предыдущих данных</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/trace</span></span></code></pre></div></li><li><p><strong>Включение трассировки</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/tracing_on</span></span></code></pre></div></li><li><p><strong>Выполнение тестовой операции</strong> (например, запуск <code>ls</code>):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/null</span></span></code></pre></div></li><li><p><strong>Остановка трассировки</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/tracing_on</span></span></code></pre></div></li><li><p><strong>Просмотр результатов</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/trace</span></span></code></pre></div><p><strong>Пример вывода</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># tracer: function</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span>#           TASK-PID    CPU#    TIMESTAMP  FUNCTION</span></span>
<span class="line"><span>#              | |       |          |         |</span></span>
<span class="line"><span>             ls-1234   [000]  123456.789: sys_open -&gt; do_sys_open</span></span>
<span class="line"><span>             ls-1234   [000]  123456.790: do_sys_open &lt;- sys_open</span></span></code></pre></div></li></ol><hr><h3 id="задание-2-фильтрация-функции" tabindex="-1">Задание 2: Фильтрация функций <a class="header-anchor" href="#задание-2-фильтрация-функции" aria-label="Permalink to &quot;Задание 2: Фильтрация функций&quot;">​</a></h3><ol><li><p><strong>Трассировка конкретной функции</strong> (например, <code>do_sys_open</code>):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> do_sys_open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/set_ftrace_filter</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/current_tracer</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/trace</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/tracing_on</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/null</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/tracing_on</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/trace</span></span></code></pre></div></li><li><p><strong>Анализ вывода</strong>: Вывод будет содержать только вызовы <code>do_sys_open</code> и связанные с ней функции.</p></li></ol><hr><h3 id="задание-3-граф-вызовов-function-graph" tabindex="-1">Задание 3: Граф вызовов (function_graph) <a class="header-anchor" href="#задание-3-граф-вызовов-function-graph" aria-label="Permalink to &quot;Задание 3: Граф вызовов (function_graph)&quot;">​</a></h3><ol><li><p><strong>Включение graph-трейсера</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function_graph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/current_tracer</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/max_graph_depth</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Ограничение глубины</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/trace</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/tracing_on</span></span></code></pre></div></li><li><p><strong>Выполнение операции</strong> (например, чтение файла):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/cpuinfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/null</span></span></code></pre></div></li><li><p><strong>Просмотр дерева вызовов</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/trace</span></span></code></pre></div><p><strong>Пример вывода</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># tracer: function_graph</span></span>
<span class="line"><span># CPU  DURATION                  FUNCTION CALLS</span></span>
<span class="line"><span># |     |   |                     |   |   |   |</span></span>
<span class="line"><span>0)   0.563 us    |        } /* vfs_read */</span></span>
<span class="line"><span>0)   1.234 us    |      } /* sys_read */</span></span>
<span class="line"><span>0) + 10.123 us   |    } /* __x64_sys_read */</span></span></code></pre></div></li></ol><hr><h3 id="задание-4-сбор-статистики" tabindex="-1">Задание 4: Сбор статистики <a class="header-anchor" href="#задание-4-сбор-статистики" aria-label="Permalink to &quot;Задание 4: Сбор статистики&quot;">​</a></h3><ol><li><p><strong>Включение статистического трейсера</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/current_tracer</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/tracing_on</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Сбор данных в течение 5 секунд</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/tracing_on</span></span></code></pre></div></li><li><p><strong>Просмотр статистики</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/kernel/debug/tracing/trace_stat/function0</span></span></code></pre></div><p><strong>Пример вывода</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Function                               Hit    Time (ns)  Avg (ns)</span></span>
<span class="line"><span>--------------                        -----  ---------  ---------</span></span>
<span class="line"><span>_raw_spin_unlock_irqrestore            120     45000      375.0</span></span>
<span class="line"><span>finish_task_switch                      80     32000      400.0</span></span></code></pre></div></li></ol><hr><h2 id="анализ-результатов" tabindex="-1">Анализ результатов <a class="header-anchor" href="#анализ-результатов" aria-label="Permalink to &quot;Анализ результатов&quot;">​</a></h2><ol><li><strong>Function tracer</strong> позволяет увидеть последовательность вызовов, но не показывает вложенность.</li><li><strong>Function graph</strong> демонстрирует иерархию вызовов и время выполнения, что критично для поиска узких мест.</li><li><strong>Фильтрация</strong> через <code>set_ftrace_filter</code> снижает объем данных и упрощает анализ.</li><li>Статистика (<code>trace_stat</code>) помогает выявить &quot;тяжелые&quot; функции по времени выполнения.</li></ol><hr><h2 id="возможные-ошибки-и-решения" tabindex="-1">Возможные ошибки и решения <a class="header-anchor" href="#возможные-ошибки-и-решения" aria-label="Permalink to &quot;Возможные ошибки и решения&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Проблема</th><th>Решение</th></tr></thead><tbody><tr><td>Каталог <code>/sys/kernel/debug/tracing</code> отсутствует</td><td>Выполните <code>mount -t debugfs nodev /sys/kernel/debug</code></td></tr><tr><td>Нет записи в <code>trace</code> после операции</td><td>Проверьте <code>tracing_on</code> (должен быть <code>1</code>), убедитесь, что трейсер активен</td></tr><tr><td>Ошибка <code>Operation not permitted</code></td><td>Запустите команды от root (<code>sudo -i</code>)</td></tr></tbody></table><hr><h2 id="выводы" tabindex="-1">Выводы <a class="header-anchor" href="#выводы" aria-label="Permalink to &quot;Выводы&quot;">​</a></h2><ol><li>ftrace — мощный инструмент для анализа внутренней работы ядра Linux.</li><li>Базовые трейсеры (<code>function</code>, <code>function_graph</code>) позволяют отслеживать вызовы функций и выявлять проблемы производительности.</li><li>Фильтрация и ограничение глубины трассировки критичны для работы с большими объемами данных.</li><li>Инструмент требует осторожности: длительная трассировка может замедлить систему.</li></ol><hr><h2 id="контрольные-вопросы" tabindex="-1">Контрольные вопросы <a class="header-anchor" href="#контрольные-вопросы" aria-label="Permalink to &quot;Контрольные вопросы&quot;">​</a></h2><ol><li><p>Какие трейсеры доступны в вашей системе?<br><em>Проверьте файл <code>/sys/kernel/debug/tracing/available_tracers</code>.</em></p></li><li><p>Как остановить трассировку без потери данных?<br><em>Запишите <code>0</code> в <code>tracing_on</code>, затем прочитайте файл <code>trace</code>.</em></p></li><li><p>Почему не рекомендуется использовать ftrace на продакшен-серверах?<br><em>Трассировка создает нагрузку на CPU и может нарушить работу системы.</em></p></li></ol><hr><p><strong>Примечание</strong>: Для углубленного анализа рекомендуется использовать графический интерфейс <strong>KernelShark</strong>, который визуализирует данные ftrace.</p><h1 id="лабораторная-работа-применение-ltrace-для-анализа-вызовов-библиотечных-функции" tabindex="-1">Лабораторная работа: Применение ltrace для анализа вызовов библиотечных функций <a class="header-anchor" href="#лабораторная-работа-применение-ltrace-для-анализа-вызовов-библиотечных-функции" aria-label="Permalink to &quot;Лабораторная работа: Применение ltrace для анализа вызовов библиотечных функций&quot;">​</a></h1><hr><h2 id="цель-работы-1" tabindex="-1">Цель работы <a class="header-anchor" href="#цель-работы-1" aria-label="Permalink to &quot;Цель работы&quot;">​</a></h2><p>Изучить принципы работы с инструментом <strong>ltrace</strong> для трассировки вызовов библиотечных функций в пользовательских приложениях, освоить методы анализа взаимодействия программ с динамическими библиотеками.</p><hr><h2 id="оборудование-и-программное-обеспечение-1" tabindex="-1">Оборудование и программное обеспечение <a class="header-anchor" href="#оборудование-и-программное-обеспечение-1" aria-label="Permalink to &quot;Оборудование и программное обеспечение&quot;">​</a></h2><ul><li>Операционная система: Linux (Ubuntu/Debian рекомендуется)</li><li>Утилиты: <code>ltrace</code> (установка: <code>sudo apt install ltrace</code>), <code>gcc</code>, <code>ldd</code></li><li>Тестовые программы: стандартные утилиты (<code>ls</code>, <code>cat</code>), простые C-программы</li><li>Права: обычный пользователь (root не требуется)</li></ul><hr><h2 id="теоретическая-часть-1" tabindex="-1">Теоретическая часть <a class="header-anchor" href="#теоретическая-часть-1" aria-label="Permalink to &quot;Теоретическая часть&quot;">​</a></h2><h3 id="что-такое-ltrace" tabindex="-1">Что такое ltrace? <a class="header-anchor" href="#что-такое-ltrace" aria-label="Permalink to &quot;Что такое ltrace?&quot;">​</a></h3><p><strong>ltrace</strong> — инструмент для динамического анализа пользовательских приложений, отслеживающий:</p><ul><li>Вызовы функций из <strong>динамических библиотек</strong> (например, <code>libc.so</code>, <code>libm.so</code>)</li><li>Параметры передаваемые в функции</li><li>Возвращаемые значения</li><li>Время выполнения операций</li></ul><h3 id="отличия-от-strace-ftrace" tabindex="-1">Отличия от strace/ftrace <a class="header-anchor" href="#отличия-от-strace-ftrace" aria-label="Permalink to &quot;Отличия от strace/ftrace&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Инструмент</th><th>Уровень анализа</th><th>Пример использования</th></tr></thead><tbody><tr><td><strong>ltrace</strong></td><td>Пользовательский (библиотечные вызовы)</td><td><code>ltrace ls</code></td></tr><tr><td><strong>strace</strong></td><td>Системные вызовы ядра</td><td><code>strace ls</code></td></tr><tr><td><strong>ftrace</strong></td><td>Функции ядра Linux</td><td>Через debugfs</td></tr></tbody></table><h3 id="как-это-работает" tabindex="-1">Как это работает? <a class="header-anchor" href="#как-это-работает" aria-label="Permalink to &quot;Как это работает?&quot;">​</a></h3><ol><li>ltrace использует механизм <strong>ptrace</strong> для приостановки процесса.</li><li>Перехватывает вызовы через <strong>PLT (Procedure Linkage Table)</strong>.</li><li>Анализирует символы в разделяемых библиотеках (требует наличия отладочной информации).</li></ol><h3 id="основные-возможности-1" tabindex="-1">Основные возможности <a class="header-anchor" href="#основные-возможности-1" aria-label="Permalink to &quot;Основные возможности&quot;">​</a></h3><ul><li>Отображение аргументов функций (например, <code>printf(&quot;Hello&quot;)</code>)</li><li>Измерение времени выполнения вызовов</li><li>Фильтрация по библиотекам/функциям</li><li>Трассировка дочерних процессов</li></ul><hr><h2 id="ход-работы-1" tabindex="-1">Ход работы <a class="header-anchor" href="#ход-работы-1" aria-label="Permalink to &quot;Ход работы&quot;">​</a></h2><h3 id="подготовка-окружения-1" tabindex="-1">Подготовка окружения <a class="header-anchor" href="#подготовка-окружения-1" aria-label="Permalink to &quot;Подготовка окружения&quot;">​</a></h3><ol><li><p><strong>Установка ltrace</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ltrace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span></code></pre></div></li><li><p><strong>Проверка поддержки динамической линковки</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ldd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/ls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libc</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Должно отобразить: libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6</span></span></code></pre></div></li></ol><hr><h3 id="задание-1-базовая-трассировка" tabindex="-1">Задание 1: Базовая трассировка <a class="header-anchor" href="#задание-1-базовая-трассировка" aria-label="Permalink to &quot;Задание 1: Базовая трассировка&quot;">​</a></h3><ol><li><p><strong>Анализ стандартной утилиты</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ltrace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div></li><li><p><strong>Пример вывода</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>__libc_start_main(0x55a3b3a0a5d0, 1, 0x7ffc1a1b3a88, 0x55a3b3a0a6c0 &lt;unfinished ...&gt;</span></span>
<span class="line"><span>setlocale(6, &quot;&quot;)                                                                 = &quot;en_US.UTF-8&quot;</span></span>
<span class="line"><span>bindtextdomain(&quot;coreutils&quot;, &quot;/usr/share/locale&quot;)                                = &quot;/usr/share/locale&quot;</span></span>
<span class="line"><span>textdomain(&quot;coreutils&quot;)                                                         = &quot;coreutils&quot;</span></span>
<span class="line"><span>isatty(1)                                                                       = 1</span></span>
<span class="line"><span>getenv(&quot;QUOTING_STYLE&quot;)                                                         = NULL</span></span></code></pre></div></li><li><p><strong>Анализ</strong>:</p><ul><li>Видны вызовы из <code>libc</code> (<code>setlocale</code>, <code>getenv</code>)</li><li>Показаны аргументы и возвращаемые значения</li><li>Не отображаются системные вызовы (в отличие от strace)</li></ul></li></ol><hr><h3 id="задание-2-расширенная-трассировка-с-опциями" tabindex="-1">Задание 2: Расширенная трассировка с опциями <a class="header-anchor" href="#задание-2-расширенная-трассировка-с-опциями" aria-label="Permalink to &quot;Задание 2: Расширенная трассировка с опциями&quot;">​</a></h3><ol><li><p><strong>Показ системных вызовов и библиотечных</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ltrace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> open</span></span></code></pre></div><p><strong>Вывод</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>open(&quot;/etc/ld.so.cache&quot;, 577, 0666)                                            = 3</span></span>
<span class="line"><span>open(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;, 577, 0666)                              = 3</span></span></code></pre></div></li><li><p><strong>Измерение времени выполнения</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ltrace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><p><strong>Статистика</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>% time     seconds  usecs/call     calls      function</span></span>
<span class="line"><span>------ ----------- ----------- --------- --------------------</span></span>
<span class="line"><span> 32.12    0.000123          41         3 __strcmp_ssse3</span></span>
<span class="line"><span> 28.10    0.000107          53         2 malloc</span></span>
<span class="line"><span> 15.64    0.000060          20         3 free</span></span></code></pre></div></li></ol><hr><h3 id="задание-3-фильтрация-вызовов" tabindex="-1">Задание 3: Фильтрация вызовов <a class="header-anchor" href="#задание-3-фильтрация-вызовов" aria-label="Permalink to &quot;Задание 3: Фильтрация вызовов&quot;">​</a></h3><ol><li><p><strong>Трассировка только функций libc</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ltrace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;*@libc.so*&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div></li><li><p><strong>Анализ конкретной функции</strong> (например, <code>malloc</code>):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ltrace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> malloc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><p><strong>Вывод</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>malloc(8)                                                                       = 0x564b6d5e8260</span></span>
<span class="line"><span>malloc(1024)                                                                    = 0x564b6d5e8280</span></span>
<span class="line"><span>malloc(128)                                                                     = 0x564b6d5e8690</span></span></code></pre></div></li></ol><hr><h3 id="задание-4-анализ-пользовательскои-программы" tabindex="-1">Задание 4: Анализ пользовательской программы <a class="header-anchor" href="#задание-4-анализ-пользовательскои-программы" aria-label="Permalink to &quot;Задание 4: Анализ пользовательской программы&quot;">​</a></h3><ol><li><p><strong>Создание тестовой программы</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// trace_test.c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdlib.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> malloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Buffer: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%p\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, buf);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Компиляция: <code>gcc trace_test.c -o trace_test</code></p></li><li><p><strong>Трассировка с детализацией</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ltrace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> trace.log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./trace_test</span></span></code></pre></div><p><strong>Содержимое trace.log</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>__libc_start_main(0x401136, 1, 0x7ffd9c8a7a28, 0x4011c0 &lt;unfinished ...&gt;</span></span>
<span class="line"><span>malloc(100)                                                                     = 0x55f51e0d9260</span></span>
<span class="line"><span>printf(&quot;Buffer: %p\\n&quot;, 0x55f51e0d9260Buffer: 0x55f51e0d9260</span></span>
<span class="line"><span>)                                          = 21</span></span>
<span class="line"><span>free(0x55f51e0d9260)                                                            = &lt;void&gt;</span></span></code></pre></div></li></ol><hr><h3 id="задание-5-сравнение-с-strace" tabindex="-1">Задание 5: Сравнение с strace <a class="header-anchor" href="#задание-5-сравнение-с-strace" aria-label="Permalink to &quot;Задание 5: Сравнение с strace&quot;">​</a></h3><ol><li><p><strong>Запуск параллельной трассировки</strong>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> open</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> open</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ltrace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> open</span></span></code></pre></div></li><li><p><strong>Различия в выводе</strong>:</p><ul><li><strong>strace</strong>: показывает сырые системные вызовы<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>openat(AT_FDCWD, &quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 3</span></span></code></pre></div></li><li><strong>ltrace</strong>: декодирует вызовы через библиотеки<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>open(&quot;/etc/ld.so.cache&quot;, 577, 0666) = 3</span></span></code></pre></div></li></ul></li></ol><hr><h2 id="анализ-результатов-1" tabindex="-1">Анализ результатов <a class="header-anchor" href="#анализ-результатов-1" aria-label="Permalink to &quot;Анализ результатов&quot;">​</a></h2><ol><li><p><strong>Ключевые наблюдения</strong>:</p><ul><li>ltrace декодирует символы библиотек, делая вывод человекочитаемым</li><li>Показывает контекст вызова (аргументы, возвратные значения)</li><li>Не требует прав root (в отличие от ftrace)</li><li>Не отслеживает статически скомпилированные программы</li></ul></li><li><p><strong>Ограничения</strong>:</p><ul><li>Не работает с программами без отладочной информации</li><li>Не показывает внутренние вызовы внутри библиотек</li><li>Может искажать временные характеристики из-за накладных расходов</li></ul></li></ol><hr><h2 id="возможные-ошибки-и-решения-1" tabindex="-1">Возможные ошибки и решения <a class="header-anchor" href="#возможные-ошибки-и-решения-1" aria-label="Permalink to &quot;Возможные ошибки и решения&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Проблема</th><th>Причина</th><th>Решение</th></tr></thead><tbody><tr><td>Нет вывода при трассировке</td><td>Программа статически скомпилирована</td><td>Проверьте через <code>ldd</code></td></tr><tr><td>&quot;No symbols found&quot;</td><td>Отсутствуют debug-символы</td><td>Установите <code>libc6-dbg</code></td></tr><tr><td>Трассировка завершается мгновенно</td><td>Нет вызовов библиотечных функций</td><td>Используйте <code>-S</code> для системных вызовов</td></tr></tbody></table><hr><h2 id="выводы-1" tabindex="-1">Выводы <a class="header-anchor" href="#выводы-1" aria-label="Permalink to &quot;Выводы&quot;">​</a></h2><ol><li>ltrace — незаменимый инструмент для анализа <strong>взаимодействия приложений с библиотеками</strong>.</li><li>Позволяет: <ul><li>Отладить проблемы с динамической линковкой</li><li>Оптимизировать использование памяти (анализ <code>malloc</code>/<code>free</code>)</li><li>Изучить скрытые зависимости программы</li></ul></li><li>Комбинирование с <strong>strace</strong> дает полную картину работы приложения (пользовательский + системный уровень).</li><li>Критичен для анализа проприетарного ПО без исходных кодов.</li></ol><hr><h2 id="контрольные-вопросы-1" tabindex="-1">Контрольные вопросы <a class="header-anchor" href="#контрольные-вопросы-1" aria-label="Permalink to &quot;Контрольные вопросы&quot;">​</a></h2><ol><li><p><strong>Почему ltrace не показывает вызовы в статически скомпилированных программах?</strong><br><em>Потому что статическая линковка включает код библиотек напрямую в бинарный файл, без использования PLT.</em></p></li><li><p><strong>Как определить, какие библиотеки использует программа?</strong><br><em>Через <code>ldd &lt;программа&gt;</code> или <code>ltrace -l &lt;программа&gt;</code>.</em></p></li><li><p><strong>Чем отличается вывод <code>ltrace -S</code> от обычного strace?</strong><br><em>ltrace декодирует параметры системных вызовов через символы библиотек, strace показывает &quot;сырые&quot; аргументы.</em></p></li><li><p><strong>Как проанализировать утечку памяти с помощью ltrace?</strong><br><em>Трассируйте вызовы <code>malloc</code>/<code>calloc</code> и <code>free</code>, проверяя баланс выделения и освобождения памяти.</em></p></li></ol><hr><h2 id="дополнительное-задание" tabindex="-1">Дополнительное задание <a class="header-anchor" href="#дополнительное-задание" aria-label="Permalink to &quot;Дополнительное задание&quot;">​</a></h2><ol><li>Скомпилируйте программу с оптимизацией (<code>gcc -O2</code>):<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> trace_test.c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> trace_test_opt</span></span></code></pre></div></li><li>Сравните вывод ltrace для обычной и оптимизированной версий.<br><strong>Наблюдение</strong>: Оптимизатор может устранить некоторые вызовы (например, <code>malloc</code>), что отразится в трассировке.</li></ol><hr><p><strong>Примечание</strong>: Для продвинутого анализа рекомендуется комбинировать ltrace с <strong>gdb</strong> (через <code>ltrace -p &lt;PID&gt;</code>) и использовать <strong>ltrace.conf</strong> для кастомизации вывода.</p>`,116)]))}const g=a(n,[["render",l]]);export{k as __pageData,g as default};
