import{_ as s,c as t,o as a,j as i}from"./chunks/framework.D4Vqf8I7.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/disciplines/osis/l5.md","filePath":"docs/disciplines/osis/l5.md","lastUpdated":1756901994000}'),o={name:"docs/disciplines/osis/l5.md"};function p(d,e,n,l,r,c){return a(),t("div",null,e[0]||(e[0]=[i("p",null,`Основы операционных систем 74 Итак логические и физические адресные пространства ни по организации, ни по размеру не соответству- ют друг другу. Максимальный размер логического адресного пространства обычно определяется разряд- ностью процессора (например, 232 ) и в современных системах значительно превышает размер физическо- го адресного пространства. Следовательно, процессор и ОС должны быть способны отобразить ссылки в коде программы в реальные физические адреса, соответствующие текущему расположению программы в основной памяти. Такое отображение адресов называют трансляцией (привязкой) адреса или связывани- ем адресов (см. рис. 8.3). Связывание логического адреса, порожденного оператором программы, с физическим должно быть осу- ществлено до начала выполнения оператора или в момент его выполнения. Таким образом, привязка ин- струкций и данных к памяти в принципе может быть сделана на следующих шагах [Silberschatz, 2002]. • Этап компиляции (Compile time). Когда на стадии компиляции известно точное место размещения процесса в памяти, тогда непосредственно генерируются физические адреса. При изменении стар- тового адреса программы необходимо перекомпилировать ее код. В качестве примера можно при- вести .com программы MS-DOS, которые связывают ее с физическими адресами на стадии компи- ляции. • Этап загрузки (Load time). Если информация о размещении программы на стадии компиляции от- сутствует, компилятор генерирует перемещаемый код. В этом случае окончательное связывание откладывается до момента загрузки. Если стартовый адрес меняется, нужно всего лишь перезагру- зить код с учетом измененной величины. • Этап выполнения (Execution time). Если процесс может быть перемещен во время выполнения из одной области памяти в другую, связывание откладывается до стадии выполнения. Здесь жела- тельно наличие специализированного оборудования, например регистров перемещения. Их значе- ние прибавляется к каждому адресу, сгенерированному процессом. Большинство современных ОС осуществляет трансляцию адресов на этапе выполнения, используя для этого специальный аппа- ратный механизм (см. лекцию 9). Рис. 8.3. Формирование логического адреса и связывание логического адреса с физическим Функции системы управления памятью Чтобы обеспечить эффективный контроль использования памяти, ОС должна выполнять следующие функции: • отображение адресного пространства процесса на конкретные области физической памяти; • распределение памяти между конкурирующими процессами; • контроль доступа к адресным пространствам процессов; • выгрузка процессов (целиком или частично) во внешнюю память, когда в оперативной памяти не- достаточно места; Основы операционных систем 75 • учет свободной и занятой памяти. В следующих разделах лекции рассматривается ряд конкретных схем управления памятью. Каждая схема включает в себя определенную идеологию управления, а также алгоритмы и структуры данных и зависит от архитектурных особенностей используемой системы. Вначале будут рассмотрены простейшие схемы. Доминирующая на сегодня схема виртуальной памяти будет описана в последующих лекциях. Простейшие схемы управления памятью Первые ОС применяли очень простые методы управления памятью. Вначале каждый процесс пользова- теля должен был полностью поместиться в основной памяти, занимать непрерывную область памяти, а система принимала к обслуживанию дополнительные пользовательские процессы до тех пор, пока все они одновременно помещались в основной памяти. Затем появился "простой свопинг" (система по- прежнему размещает каждый процесс в основной памяти целиком, но иногда на основании некоторого критерия целиком сбрасывает образ некоторого процесса из основной памяти во внешнюю и заменяет его в основной памяти образом другого процесса). Такого рода схемы имеют не только историческую ценность. В настоящее время они применяются в учебных и научно-исследовательских модельных ОС, а также в ОС для встроенных (embedded) компьютеров. Схема с фиксированными разделами Самым простым способом управления оперативной памятью является ее предварительное (обычно на этапе генерации или в момент загрузки системы) разбиение на несколько разделов фиксированной вели- чины. Поступающие процессы помещаются в тот или иной раздел. При этом происходит условное раз- биение физического адресного пространства. Связывание логических и физических адресов процесса происходит на этапе его загрузки в конкретный раздел, иногда – на этапе компиляции. Каждый раздел может иметь свою очередь процессов, а может существовать и глобальная очередь для всех разделов(см. рис. 8.4). Эта схема была реализована в IBM OS/360 (MFT), DEC RSX-11 и ряде других систем. Подсистема управления памятью оценивает размер поступившего процесса, выбирает подходящий для него раздел, осуществляет загрузку процесса в этот раздел и настройку адресов. Рис. 8.4. Схема с фиксированными разделами: (a) – с общей очередью процессов, (b) – с отдельными очередями процессов Очевидный недостаток этой схемы – число одновременно выполняемых процессов ограничено числом разделов. Основы операционных систем 76 Другим существенным недостатком является то, что предлагаемая схема сильно страдает от внутренней фрагментации – потери части памяти, выделенной процессу, но не используемой им. Фрагментация воз- никает потому, что процесс не полностью занимает выделенный ему раздел или потому, что некоторые разделы слишком малы для выполняемых пользовательских программ. Один процесс в памяти Частный случай схемы с фиксированными разделами – работа менеджера памяти однозадачной ОС. В памяти размещается один пользовательский процесс. Остается определить, где располагается пользова- тельская программа по отношению к ОС – в верхней части памяти, в нижней или в средней. Причем часть ОС может быть в ROM (например, BIOS, драйверы устройств). Главный фактор, влияющий на это решение, – расположение вектора прерываний, который обычно локализован в нижней части памяти, по- этому ОС также размещают в нижней. Примером такой организации может служить ОС MS-DOS. Защита адресного пространства ОС от пользовательской программы может быть организована при по- мощи одного граничного регистра, содержащего адрес границы ОС. Оверлейная структура Так как размер логического адресного пространства процесса может быть больше, чем размер выделен- ного ему раздела (или больше, чем размер самого большого раздела), иногда используется техника, на- зываемая оверлей (overlay) или организация структуры с перекрытием. Основная идея – держать в памя- ти только те инструкции программы, которые нужны в данный момент. Потребность в таком способе загрузки появляется, если логическое адресное пространство системы мало, например 1 Мбайт (MS-DOS) или даже всего 64 Кбайта (PDP-11), а программа относительно велика. На современных 32-разрядных системах, где виртуальное адресное пространство измеряется гигабайтами, проблемы с нехваткой памяти решаются другими способами (см. раздел "Виртуальная память"). Рис. 8.5. Организация структуры с перекрытием. Можно поочередно загружать в память ветви A-B, A-C-D и A-C-E программы Коды ветвей оверлейной структуры программы находятся на диске как абсолютные образы памяти и считываются драйвером оверлеев при необходимости. Для описания оверлейной структуры обычно ис- пользуется специальный несложный язык (overlay description language). Совокупность файлов исполняе- мой программы дополняется файлом (обычно с расширением .odl), описывающим дерево вызовов внутри программы. Для примера, приведенного на рис. 8.5, текст этого файла может выглядеть так: A-(B,C) C-(D,E) Синтаксис подобного файла может распознаваться загрузчиком. Привязка к физической памяти проис- ходит в момент очередной загрузки одной из ветвей программы. Оверлеи могут быть полностью реализованы на пользовательском уровне в системах с простой файловой структурой. ОС при этом лишь делает несколько больше операций ввода-вывода. Типовое решение – по- Основы операционных систем 77 рождение линкером специальных команд, которые включают загрузчик каждый раз, когда требуется об- ращение к одной из перекрывающихся ветвей программы. Тщательное проектирование оверлейной структуры отнимает много времени и требует знания устройст- ва программы, ее кода, данных и языка описания оверлейной структуры. По этой причине применение оверлеев ограничено компьютерами с небольшим логическим адресным пространством. Как мы увидим в дальнейшем, проблема оверлейных сегментов, контролируемых программистом, отпадает благодаря появлению систем виртуальной памяти. Заметим, что возможность организации структур с перекрытиями во многом обусловлена свойством ло- кальности, которое позволяет хранить в памяти только ту информацию, которая необходима в конкрет- ный момент вычислений. Динамическое распределение. Свопинг Имея дело с пакетными системами, можно обходиться фиксированными разделами и не использовать ничего более сложного. В системах с разделением времени возможна ситуация, когда память не в со- стоянии содержать все пользовательские процессы. Приходится прибегать к свопингу (swapping) – пере- мещению процессов из главной памяти на диск и обратно целиком. Частичная выгрузка процессов на диск осуществляется в системах со страничной организацией (paging) и будет рассмотрена ниже. Выгруженный процесс может быть возвращен в то же самое адресное пространство или в другое. Это ограничение диктуется методом связывания. Для схемы связывания на этапе выполнения можно загру- зить процесс в другое место памяти. Свопинг не имеет непосредственного отношения к управлению памятью, скорее он связан с подсистемой планирования процессов. Очевидно, что свопинг увеличивает время переключения контекста. Время вы- грузки может быть сокращено за счет организации специально отведенного пространства на диске (раз- дел для свопинга). Обмен с диском при этом осуществляется блоками большего размера, то есть быстрее, чем через стандартную файловую систему. Во многих версиях Unix свопинг начинает работать только тогда, когда возникает необходимость в снижении загрузки системы. Схема с переменными разделами В принципе, система свопинга может базироваться на фиксированных разделах. Более эффективной, од- нако, представляется схема динамического распределения или схема с переменными разделами, которая может использоваться и в тех случаях, когда все процессы целиком помещаются в памяти, то есть в от- сутствие свопинга. В этом случае вначале вся память свободна и не разделена заранее на разделы. Вновь поступающей задаче выделяется строго необходимое количество памяти, не более. После выгрузки про- цесса память временно освобождается. По истечении некоторого времени память представляет собой пе- ременное число разделов разного размера (рис. 8.6). Смежные свободные участки могут быть объедине- ны. Основы операционных систем 78 Рис. 8.6. Динамика распределения памяти между процессами (серым цветом показана неиспользуемая память) В какой раздел помещать процесс? Наиболее распространены три стратегии. • Стратегия первого подходящего (First fit). Процесс помещается в первый подходящий по размеру раздел. • Стратегия наиболее подходящего (Best fit). Процесс помещается в тот раздел, где после его за- грузки останется меньше всего свободного места. • Стратегия наименее подходящего (Worst fit). При помещении в самый большой раздел в нем оста- ется достаточно места для возможного размещения еще одного процесса. Моделирование показало, что доля полезно используемой памяти в первых двух случаях больше, при этом первый способ несколько быстрее. Попутно заметим, что перечисленные стратегии широко приме- няются и другими компонентами ОС, например для размещения файлов на диске. Типовой цикл работы менеджера памяти состоит в анализе запроса на выделение свободного участка (раздела), выборе его среди имеющихся в соответствии с одной из стратегий (первого подходящего, наи- более подходящего и наименее подходящего), загрузке процесса в выбранный раздел и последующих изменениях таблиц свободных и занятых областей. Аналогичная корректировка необходима и после за- вершения процесса. Связывание адресов может осуществляться на этапах загрузки и выполнения. Этот метод более гибок по сравнению с методом фиксированных разделов, однако ему присуща внешняя фрагментация – наличие большого числа участков неиспользуемой памяти, не выделенной ни одному процессу. Выбор стратегии размещения процесса между первым подходящим и наиболее подходящим слабо влияет на величину фрагментации. Любопытно, что метод наиболее подходящего может оказаться наихудшим, так как он оставляет множество мелких незанятых блоков. Статистический анализ показывает, что пропадает в среднем 1/3 памяти! Это известное правило 50% (два соседних свободных участка в отличие от двух соседних процессов могут быть объединены). Одно из решений проблемы внешней фрагментации – организовать сжатие, то есть перемещение всех занятых (свободных) участков в сторону возрастания (убывания) адресов, так, чтобы вся свободная па- мять образовала непрерывную область. Этот метод иногда называют схемой с перемещаемыми раздела- ми. В идеале фрагментация после сжатия должна отсутствовать. Сжатие, однако, является дорогостоя- щей процедурой, алгоритм выбора оптимальной стратегии сжатия очень труден и, как правило, сжатие осуществляется в комбинации с выгрузкой и загрузкой по другим адресам. Страничная память Описанные выше схемы недостаточно эффективно используют память, поэтому в современных схемах управления памятью не принято размещать процесс в оперативной памяти одним непрерывным блоком. В самом простом и наиболее распространенном случае страничной организации памяти (или paging) как логическое адресное пространство, так и физическое представляются состоящими из наборов блоков или страниц одинакового размера. При этом образуются логические страницы (page), а соответствующие единицы в физической памяти называют физическими страницами или страничными кадрами (page frames). Страницы (и страничные кадры) имеют фиксированную длину, обычно являющуюся степенью числа 2, и не могут перекрываться. Каждый кадр содержит одну страницу данных. При такой организа- ции внешняя фрагментация отсутствует, а потери из-за внутренней фрагментации, поскольку процесс занимает целое число страниц, ограничены частью последней страницы процесса. Логический адрес в страничной системе – упорядоченная пара (p,d), где p – номер страницы в виртуаль- ной памяти, а d – смещение в рамках страницы p, на которой размещается адресуемый элемент. Заметим, что разбиение адресного пространства на страницы осуществляется вычислительной системой незаметно Основы операционных систем 79 для программиста. Поэтому адрес является двумерным лишь с точки зрения операционной системы, а с точки зрения программиста адресное пространство процесса остается линейным. Описываемая схема позволяет загрузить процесс, даже если нет непрерывной области кадров, достаточ- ной для размещения процесса целиком. Но одного базового регистра для осуществления трансляции ад- реса в данной схеме недостаточно. Система отображения логических адресов в физические сводится к системе отображения логических страниц в физические и представляет собой таблицу страниц, которая хранится в оперативной памяти. Иногда говорят, что таблица страниц – это кусочно-линейная функция отображения, заданная в табличном виде. Интерпретация логического адреса показана на рис. 8.7. Если выполняемый процесс обращается к логи- ческому адресу v = (p,d), механизм отображения ищет номер страницы p в таблице страниц и определяет, что эта страница находится в страничном кадре p', формируя реальный адрес из p' и d. Рис. 8.7. Связь логического и физического адресов при страничной организации памяти Таблица страниц (page table) адресуется при помощи специального регистра процессора и позволяет оп- ределить номер кадра по логическому адресу. Помимо этой основной задачи, при помощи атрибутов, за- писанных в строке таблицы страниц, можно организовать контроль доступа к конкретной странице и ее защиту. Отметим еще раз различие точек зрения пользователя и системы на используемую память. С точки зре- ния пользователя, его память – единое непрерывное пространство, содержащее только одну программу. Реальное отображение скрыто от пользователя и контролируется ОС. Заметим, что процессу пользовате- ля чужая память недоступна. Он не имеет возможности адресовать память за пределами своей таблицы страниц, которая включает только его собственные страницы. Для управления физической памятью ОС поддерживает структуру таблицы кадров. Она имеет одну за- пись на каждый физический кадр, показывающий его состояние. Отображение адресов должно быть осуществлено корректно даже в сложных случаях и обычно реализу- ется аппаратно. Для ссылки на таблицу процессов используется специальный регистр. При переключе- нии процессов необходимо найти таблицу страниц нового процесса, указатель на которую входит в кон- текст процесса. Основы операционных систем 80 Сегментная и сегментно-страничная организация памяти Существуют две другие схемы организации управления памятью: сегментная и сегментно-страничная. Сегменты, в отличие от страниц, могут иметь переменный размер. Идея сегментации изложена во введе- нии. При сегментной организации виртуальный адрес является двумерным как для программиста, так и для операционной системы, и состоит из двух полей – номера сегмента и смещения внутри сегмента. Подчеркнем, что в отличие от страничной организации, где линейный адрес преобразован в дву- мерный операционной системой для удобства отображения, здесь двумерность адреса является следствием представления пользователя о процессе не в виде линейного массива байтов, а как на- бор сегментов переменного размера (данные, код, стек...). Программисты, пишущие на языках низкого уровня, должны иметь представление о сегментной органи- зации, явным образом меняя значения сегментных регистров (это хорошо видно по текстам программ, написанных на Ассемблере). Логическое адресное пространство – набор сегментов. Каждый сегмент имеет имя, размер и другие параметры (уровень привилегий, разрешенные виды обращений, флаги при- сутствия). В отличие от страничной схемы, где пользователь задает только один адрес, который разбива- ется на номер страницы и смещение прозрачным для программиста образом, в сегментной схеме пользо- ватель специфицирует каждый адрес двумя величинами: именем сегмента и смещением. Каждый сегмент – линейная последовательность адресов, начинающаяся с 0. Максимальный размер сег- мента определяется разрядностью процессора (при 32-разрядной адресации это 2 32 байт или 4 Гбайт). Размер сегмента может меняться динамически (например, сегмент стека). В элементе таблицы сегментов помимо физического адреса начала сегмента обычно содержится и длина сегмента. Если размер смеще- ния в виртуальном адресе выходит за пределы размера сегмента, возникает исключительная ситуация. Логический адрес – упорядоченная пара v=(s,d), номер сегмента и смещение внутри сегмента. В системах, где сегменты поддерживаются аппаратно, эти параметры обычно хранятся в таблице деск- рипторов сегментов, а программа обращается к этим дескрипторам по номерам-селекторам. При этом в контекст каждого процесса входит набор сегментных регистров, содержащих селекторы текущих сегмен- тов кода, стека, данных и т. д. и определяющих, какие сегменты будут использоваться при разных видах обращений к памяти. Это позволяет процессору уже на аппаратном уровне определять допустимость об- ращений к памяти, упрощая реализацию защиты информации от повреждения и несанкционированного доступа. Рис. 8.8. Преобразование логического адреса при сегментной организации памяти Аппаратная поддержка сегментов распространена мало (главным образом на процессорах Intel). В боль- шинстве ОС сегментация реализуется на уровне, не зависящем от аппаратуры. Основы операционных систем 81 Хранить в памяти сегменты большого размера целиком так же неудобно, как и хранить процесс непре- рывным блоком. Напрашивается идея разбиения сегментов на страницы. При сегментно-страничной ор- ганизации памяти происходит двухуровневая трансляция виртуального адреса в физический. В этом слу- чае логический адрес состоит из трех полей: номера сегмента логической памяти, номера страницы внутри сегмента и смещения внутри страницы. Соответственно, используются две таблицы отображения – таблица сегментов, связывающая номер сегмента с таблицей страниц, и отдельная таблица страниц для каждого сегмента. Рис. 8.9. Упрощенная схема формирования физического адреса при сегментно-страничной организации памяти Сегментно-страничная и страничная организация памяти позволяет легко организовать совместное ис- пользование одних и тех же данных и программного кода разными задачами. Для этого различные логи- ческие блоки памяти разных процессов отображают в один и тот же блок физической памяти, где разме- щается разделяемый фрагмент кода или данных. Заключение В настоящей лекции описаны простейшие способы управления памятью в ОС. Физическая память ком- пьютера имеет иерархическую структуру. Программа представляет собой набор сегментов в логическом адресном пространстве. ОС осуществляет связывание логических и физических адресных пространств. В последующи`,-1)]))}const g=s(o,[["render",p]]);export{f as __pageData,g as default};
