import{_ as s,c as t,o as i,ag as e}from"./chunks/framework.D4Vqf8I7.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/disciplines/osis/s3.md","filePath":"docs/disciplines/osis/s3.md","lastUpdated":1759330118000}'),o={name:"docs/disciplines/osis/s3.md"};function l(n,a,d,r,h,p){return i(),t("div",null,a[0]||(a[0]=[e('<p><strong>Самостоятельная работа по дисциплине: &quot;Операционные системы и среды&quot;</strong><br><strong>Тема: Основные команды для работы с памятью (оперативной) в GNU/Linux</strong><br><strong>Раздел: Организация оперативной памяти и виртуальной памяти в операционных системах</strong></p><hr><h3 id="блок-теории" tabindex="-1"><strong>Блок теории</strong> <a class="header-anchor" href="#блок-теории" aria-label="Permalink to &quot;**Блок теории**&quot;">​</a></h3><h4 id="_1-физическая-организация-памяти-компьютера" tabindex="-1"><strong>1. Физическая организация памяти компьютера</strong> <a class="header-anchor" href="#_1-физическая-организация-памяти-компьютера" aria-label="Permalink to &quot;**1. Физическая организация памяти компьютера**&quot;">​</a></h4><p>Оперативная память (RAM) — это энергозависимое устройство хранения данных, используемое процессором для временного хранения программ и данных. Физически память состоит из ячеек, каждая из которых имеет уникальный адрес. ОС управляет физической памятью, распределяя её между процессами.</p><h4 id="_2-простеишие-схемы-управления-памятью" tabindex="-1"><strong>2. Простейшие схемы управления памятью</strong> <a class="header-anchor" href="#_2-простеишие-схемы-управления-памятью" aria-label="Permalink to &quot;**2. Простейшие схемы управления памятью**&quot;">​</a></h4><ul><li><strong>Монопрограммирование</strong>: только одна программа работает в памяти.</li><li><strong>Разделение памяти на фиксированные/динамические разделы</strong>: позволяет одновременно запускать несколько процессов, но приводит к фрагментации.</li></ul><h4 id="_3-страничная-память" tabindex="-1"><strong>3. Страничная память</strong> <a class="header-anchor" href="#_3-страничная-память" aria-label="Permalink to &quot;**3. Страничная память**&quot;">​</a></h4><p>Память делится на <strong>страницы</strong> (фиксированный размер, обычно 4 Кбайт). Процесс делится на блоки такой же длины — <strong>страницы процесса</strong>. Страницы процесса могут размещаться в произвольных <strong>кадрах (фреймах)</strong> физической памяти. Преобразование виртуального адреса в физический осуществляется с помощью <strong>таблицы страниц</strong>.</p><h4 id="_4-сегментная-и-сегментно-страничная-организация-памяти" tabindex="-1"><strong>4. Сегментная и сегментно-страничная организация памяти</strong> <a class="header-anchor" href="#_4-сегментная-и-сегментно-страничная-организация-памяти" aria-label="Permalink to &quot;**4. Сегментная и сегментно-страничная организация памяти**&quot;">​</a></h4><ul><li><strong>Сегментная организация</strong>: память делится на логические сегменты (код, данные, стек). Каждый сегмент имеет базовый адрес и длину.</li><li><strong>Сегментно-страничная организация</strong>: сочетает оба подхода — сегменты делятся на страницы, что позволяет эффективно управлять памятью и обеспечивать защиту.</li></ul><h4 id="_5-виртуальная-память" tabindex="-1"><strong>5. Виртуальная память</strong> <a class="header-anchor" href="#_5-виртуальная-память" aria-label="Permalink to &quot;**5. Виртуальная память**&quot;">​</a></h4><p>Понятие <strong>виртуальной памяти</strong> позволяет процессу использовать больше памяти, чем физически доступно. Виртуальное адресное пространство процесса отображается на физическую память и файл подкачки (swap). Неиспользуемые страницы могут выгружаться на диск.</p><p><strong>Архитектурные средства поддержки виртуальной памяти</strong>:</p><ul><li>Механизм трансляции адресов (MMU — Memory Management Unit).</li><li>Биты в таблицах страниц: присутствие (present), доступ на чтение/запись, изменение (dirty), доступ (accessed).</li></ul><h4 id="_6-структура-таблицы-страниц" tabindex="-1"><strong>6. Структура таблицы страниц</strong> <a class="header-anchor" href="#_6-структура-таблицы-страниц" aria-label="Permalink to &quot;**6. Структура таблицы страниц**&quot;">​</a></h4><ul><li>Таблица страниц — это массив, где каждый элемент (запись) содержит физический адрес кадра и управляющие биты.</li><li>При использовании многоуровневых таблиц (например, 2- или 4-уровневых) снижается объём памяти, необходимой для хранения таблиц.</li></ul><h4 id="_7-ассоциативная-память-tlb-—-translation-lookaside-buffer" tabindex="-1"><strong>7. Ассоциативная память (TLB — Translation Lookaside Buffer)</strong> <a class="header-anchor" href="#_7-ассоциативная-память-tlb-—-translation-lookaside-buffer" aria-label="Permalink to &quot;**7. Ассоциативная память (TLB — Translation Lookaside Buffer)**&quot;">​</a></h4><p>Специальный кэш в процессоре, хранящий недавно использованные пары &quot;виртуальный адрес – физический адрес&quot;. Ускоряет трансляцию адресов.</p><h4 id="_8-инвертированная-таблица-страниц" tabindex="-1"><strong>8. Инвертированная таблица страниц</strong> <a class="header-anchor" href="#_8-инвертированная-таблица-страниц" aria-label="Permalink to &quot;**8. Инвертированная таблица страниц**&quot;">​</a></h4><p>Используется в системах с большим объёмом виртуальной памяти. Вместо таблицы на каждый процесс — одна глобальная таблица, где каждая запись соответствует одному физическому кадру. Уменьшает объём памяти, но усложняет поиск.</p><h4 id="_9-размер-страницы" tabindex="-1"><strong>9. Размер страницы</strong> <a class="header-anchor" href="#_9-размер-страницы" aria-label="Permalink to &quot;**9. Размер страницы**&quot;">​</a></h4><p>Стандартный размер — 4 Кбайт. Используются также большие страницы (Huge Pages, например 2 Мб или 1 Гб) для повышения производительности при работе с большими объёмами данных.</p><h4 id="_10-отображение-фаилов-в-память-memory-mapping" tabindex="-1"><strong>10. Отображение файлов в память (memory mapping)</strong> <a class="header-anchor" href="#_10-отображение-фаилов-в-память-memory-mapping" aria-label="Permalink to &quot;**10. Отображение файлов в память (memory mapping)**&quot;">​</a></h4><p>Системный вызов <code>mmap()</code> позволяет отобразить файл прямо в виртуальную память процесса. Это упрощает работу с файлами и позволяет разделять память между процессами.</p><h4 id="_11-потребление-памяти-процессом" tabindex="-1"><strong>11. Потребление памяти процессом</strong> <a class="header-anchor" href="#_11-потребление-памяти-процессом" aria-label="Permalink to &quot;**11. Потребление памяти процессом**&quot;">​</a></h4><p>Процесс использует:</p><ul><li><strong>Текст (код)</strong> — исполняемый код программы.</li><li><strong>Данные</strong> — глобальные и статические переменные.</li><li><strong>Куча (heap)</strong> — динамически выделяемая память (<code>malloc</code>, <code>new</code>).</li><li><strong>Стек (stack)</strong> — локальные переменные и вызовы функций.</li></ul><hr><h3 id="основные-команды-gnu-linux-для-анализа-использования-памяти" tabindex="-1"><strong>Основные команды GNU/Linux для анализа использования памяти</strong> <a class="header-anchor" href="#основные-команды-gnu-linux-для-анализа-использования-памяти" aria-label="Permalink to &quot;**Основные команды GNU/Linux для анализа использования памяти**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Команда</th><th>Назначение</th></tr></thead><tbody><tr><td><code>free</code></td><td>Отображает объём используемой и свободной оперативной памяти и swap.</td></tr><tr><td><code>top</code></td><td>Интерактивный мониторинг процессов и потребления ресурсов (включая память).</td></tr><tr><td><code>htop</code></td><td>Улучшенная версия <code>top</code> с цветным интерфейсом и возможностью прокрутки.</td></tr><tr><td><code>vmstat</code></td><td>Отображает статистику по памяти, свопингу, процессам, CPU.</td></tr><tr><td><code>cat /proc/meminfo</code></td><td>Показывает детальную информацию о состоянии памяти.</td></tr><tr><td><code>ps aux --sort=-%mem</code></td><td>Список процессов, отсортированных по потреблению памяти.</td></tr><tr><td><code>pmap &lt;PID&gt;</code></td><td>Показывает карту памяти конкретного процесса (виртуальные адреса, размеры сегментов).</td></tr><tr><td><code>smem</code></td><td>Утилита для анализа потребления памяти с учётом shared-памяти.</td></tr><tr><td><code>lscpu</code></td><td>Показывает параметры CPU, включая поддержку технологий виртуализации и TLB.</td></tr><tr><td><code>sudo dmesg | grep -i memory</code></td><td>Просмотр информации о памяти из системного лога.</td></tr></tbody></table><hr><h3 id="практическое-задание-самостоятельная-работа" tabindex="-1"><strong>Практическое задание (самостоятельная работа)</strong> <a class="header-anchor" href="#практическое-задание-самостоятельная-работа" aria-label="Permalink to &quot;**Практическое задание (самостоятельная работа)**&quot;">​</a></h3><p><strong>Цель</strong>: Изучить текущее состояние оперативной памяти, проанализировать потребление памяти процессами и понять принципы виртуальной памяти в Linux.</p><h4 id="задание-1-анализ-общеи-памяти" tabindex="-1"><strong>Задание 1: Анализ общей памяти</strong> <a class="header-anchor" href="#задание-1-анализ-общеи-памяти" aria-label="Permalink to &quot;**Задание 1: Анализ общей памяти**&quot;">​</a></h4><ol><li>Выполните команду:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">free</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span></span></code></pre></div>— Объясните, что означают столбцы: <code>total</code>, <code>used</code>, <code>free</code>, <code>shared</code>, <code>buff/cache</code>, <code>available</code>.</li><li>Выполните:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/meminfo</span></span></code></pre></div>— Найдите строки: <code>MemTotal</code>, <code>MemFree</code>, <code>Cached</code>, <code>SwapTotal</code>, <code>SwapFree</code>. Что они означают?</li></ol><h4 id="задание-2-мониторинг-процессов" tabindex="-1"><strong>Задание 2: Мониторинг процессов</strong> <a class="header-anchor" href="#задание-2-мониторинг-процессов" aria-label="Permalink to &quot;**Задание 2: Мониторинг процессов**&quot;">​</a></h4><ol><li>Запустите:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">top</span></span></code></pre></div>— Найдите процессы с наибольшим потреблением памяти (%MEM). — Какой процесс использует больше всего памяти? Запишите его PID и имя.</li><li>Выйдите из <code>top</code> (нажмите <code>q</code>) и выполните:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aux</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --sort=-%mem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> head</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -10</span></span></code></pre></div>— Сравните результаты с <code>top</code>.</li></ol><h4 id="задание-3-карта-памяти-процесса" tabindex="-1"><strong>Задание 3: Карта памяти процесса</strong> <a class="header-anchor" href="#задание-3-карта-памяти-процесса" aria-label="Permalink to &quot;**Задание 3: Карта памяти процесса**&quot;">​</a></h4><ol><li>Найдите PID любого запущенного процесса (например, <code>bash</code>):<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aux</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div></li><li>Выполните:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pmap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div>— Проанализируйте вывод: какие области памяти используются (текст, куча, стек, mmap)? Какие адреса и размеры?</li></ol><h4 id="задание-4-виртуальная-память-и-своп" tabindex="-1"><strong>Задание 4: Виртуальная память и своп</strong> <a class="header-anchor" href="#задание-4-виртуальная-память-и-своп" aria-label="Permalink to &quot;**Задание 4: Виртуальная память и своп**&quot;">​</a></h4><ol><li>Выполните:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vmstat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre></div>— Объясните значение столбцов <code>si</code> (swap in) и <code>so</code> (swap out). Что происходит, если они больше 0?</li><li>Проверьте наличие swap:<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swapon</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --show</span></span></code></pre></div></li></ol><h4 id="задание-5-дополнительно-по-желанию" tabindex="-1"><strong>Задание 5: Дополнительно (по желанию)</strong> <a class="header-anchor" href="#задание-5-дополнительно-по-желанию" aria-label="Permalink to &quot;**Задание 5: Дополнительно (по желанию)**&quot;">​</a></h4><ol><li>Установите <code>htop</code> (если не установлен):<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> htop</span></span></code></pre></div></li><li>Запустите <code>htop</code> и найдите: <ul><li>Процессы с высоким потреблением памяти.</li><li>Информацию о нагрузке на CPU и использование swap.</li></ul></li></ol><hr><h3 id="вопросы-для-самопроверки" tabindex="-1"><strong>Вопросы для самопроверки</strong> <a class="header-anchor" href="#вопросы-для-самопроверки" aria-label="Permalink to &quot;**Вопросы для самопроверки**&quot;">​</a></h3><ol><li>Чем отличается физическая память от виртуальной?</li><li>Как работает страничная организация памяти?</li><li>Что такое TLB и зачем он нужен?</li><li>Какой механизм позволяет процессу использовать больше памяти, чем есть в системе?</li><li>Что означает &quot;отображение файла в память&quot; и какие преимущества это даёт?</li><li>Почему в <code>free</code> строка <code>available</code> может отличаться от <code>free</code>?</li></ol><hr><h3 id="форма-отчета" tabindex="-1"><strong>Форма отчёта</strong> <a class="header-anchor" href="#форма-отчета" aria-label="Permalink to &quot;**Форма отчёта**&quot;">​</a></h3><p>Подготовьте документ (в формате <code>.docx</code> или <code>.pdf</code>), содержащий:</p><ol><li>Краткое резюме по теории (1–2 страницы).</li><li>Результаты выполнения всех заданий (вывод команд и ваши пояснения).</li><li>Ответы на вопросы для самопроверки.</li><li>Вывод: что вы узнали о работе памяти в Linux.</li></ol><hr><p><strong>Рекомендуемая литература</strong>:</p><ol><li>Э. Таненбаум — <em>Современные операционные системы</em>.</li><li>Д. Стивенс, С. Рохли — <em>UNIX. Профессиональное программирование</em>.</li><li>Официальная документация по <code>man free</code>, <code>man pmap</code>, <code>man vmstat</code>.</li></ol><hr><p>✅ <strong>Выполнив эту работу, вы получите практическое понимание управления памятью в Linux и углубите знания по архитектуре виртуальной памяти.</strong></p>',56)]))}const k=s(o,[["render",l]]);export{g as __pageData,k as default};
